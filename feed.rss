<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Mozahler</title><description>The Next Level</description><link>https://github.com/mozahler/mozahler.github.io</link><language>en</language><lastBuildDate>Fri, 11 Nov 2022 08:57:12 -0500</lastBuildDate><pubDate>Fri, 11 Nov 2022 08:57:12 -0500</pubDate><ttl>250</ttl><atom:link href="https://github.com/mozahler/mozahler.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/Enhancing%20This%20Website</guid><title>Using Regular Expressions for Matching</title><description>Should I Add Tutorials to this Site?</description><link>https://github.com/mozahler/mozahler.github.io/posts/Enhancing%20This%20Website</link><pubDate>Fri, 11 Nov 2022 12:00:00 -0500</pubDate><content:encoded><![CDATA[<h2>An Example of What I Could Add Next</h2><p>I'm planning on making tutorials a feature of this blog. I have quite a few of them under development in various states of completion. You can see one that I put together earlier this year already posted on my GitHub pages.</p><p><a href="https://github.com/Mozahler/FloodFill">Mozahler - FloodFill</a><br><br>At the bottom of this page you can see a partial list of other potential projects. If you would like to see one of them published, then drop me an email by using the link located below my avatar. Please share your thoughts.<br>˙</p><h2>My Current Project</h2><p>In case you didn't check out my earlier tutorial on the Flood Fill algorithm, let me show you a portion of the project I'm currently working on. This is an excerpt/demo from a possible multi-part tutorial that uses <strong>Wordle</strong> as a demonstration app to discuss a number of Swift-related topics. This should give you some idea of my approach and you can decide if you like it or not.</p><p>In my <strong>Wordle</strong> tutorial I use the popular game as the focus of a project defined as a single <strong>Swift Package</strong> which tangentially covers a number of technologies, best practices, unit testing, Swift Animation, configuring Fastlane and more. Most important is that the end product is a complete app.<br><br>#### ... An Excerpt from the Wordle Tutorial</p><p>For those who have studied Swift in school, but haven't had a chance to take things to the next level, the is a complete example describing how to create an iOS app, covering many bases - enough to get your app into the store.<br><br>In this extract/demo, I touch upon<br><br>- <strong>Regular Expressions</strong> and <strong>Pattern Matching</strong><br>- <strong>Unit Tests</strong> in Xcode<br>- Using <strong>Swift Package Manager</strong> to modularize your work<br>- Organizing your code by applying the principles of <strong>Swift Composable Architecture (TCA)</strong><br><br>Upon completing the tutorial you would have created a <strong>Swift Package</strong> containing all the code for a complete Wordle app (including tests) written using SwiftUI and relying on SwiftComposableArchitecture that runs on a real device (iPhone or iPad) or simulator.</p><h2>The Color-Coded Tiles</h2><p>I'm going to discuss some of the rules of the game here, but if you are unfamiliar with the gameplay, you should definitely play a few games yourself before reading further. None of this is very complicated, but you shouldn't be trying to conquer multiple concepts simultaneously.</p><p>The object of the game is to guess the solution - a five-letter word selected by the app when you start the game. You take a turn by typing in five-letters (they have to represent real words, and they have to be in the game's main list of vetted words). The NYT has curated a list which removes possibly offensive words (pussy) and has recently revised their rules to not allow simple plurals (3 letters plus <strong>es</strong> or 4 letters plus <strong>s</strong>). Geese for goose is still valid.</p><p>When you take a turn, or submit a guess by tapping on the <strong>submit</strong> button, the app cycles through your 5 tile choices, matching them against the solution. It colors the tiles based on whether and where the letter appears in the solution. By applying what you know about the color category, you can mentally narrow down the list of possible solutions. The object of the game is to guess the solution in as few turns as possible. And you're only allowed six chances to do so.</p><p>Let's take a minute to understand how a tile turns a particular color before coming up with code that puts it all together.˙</p><h2>The Yellow Tile</h2><p>A yellow tile signifies that the letter is represented in the solution, but is not in the correct position.</p><p>This, surprisingly, gives you a lot of information. It can be a bit frustrating to apply it, though. We know that if a tile is yellow that this particular letter appears at least once in the final solution. Knowing that it is in the wrong place is also useful, if as I mentioned, a bit frustrating. If there are 3 yellows and 2 greens, then you know you have all the letters you need for the solution, and can avoid wasting a turn by trying out new letters.</p><h2>The Black Tile</h2><p>It is incredibly useful to know what letters aren't in the word. You can still submit the letter in any subsequent guesses (to help construct a word using unused letters - remember it has to be a valid word before you're allowed to submit it!) The problem is that there are 26 possible letters and you only get 6 attempts. You don't want to waste too much energy eliminating letters from consideration.</p><p>Personally, at the start of the game I like to submit two guesses using the most frequent letters in American English (including most of the vowels). This means I rarely solve a word in under 3 guesses. It also means that I have most of the vowels and possibly a few of the consonants by the third guess. Keep in mind that the game on the NYT is edited/curated which introduces a certain bias. And be aware that the most used first guess is <strong>Adieu</strong>.<br>˙</p><h2>The Green Tile</h2><p>Green is gold in this context. A green tile is by far the most useful, and it signifies that you have the letter and the position exactly right.</p><p>It doesn't mean that you are done with this letter - think of double <strong>oo</strong>, <strong>ee</strong>, <strong>ll</strong>, <strong>mm</strong>, <strong>ss</strong>, not to mention non-consecutive letters, like <strong>banal</strong> or <strong>smash</strong>. But it gives you a chance to relax a bit as it confirms you are on the right track.</p><p>The most useful aspect of the green tile is that you also have positional information. Applying this information gives you the best opportunity to whittle down the size of the main list (pool of candidates). However, this also means processing this information takes a bit more ingenuity, or at least a better data structure than just a simple array of letters.</p><h1>Using Regular Expressions for Matching</h1><p>If you're a mathematician, you might prefer to use the advanced capabilities of working with Swift's RegularExpression that have been added with Swift 5.7 (Xcode 14+). For the rest of us (I got into computer science because I prefer letting the machine do the math), the minimal required knowledge will do. I'll go into what that means shortly.</p><p>Regular Expressions deserve a unit to themselves. Support for Regular Expressions is very robust in Swift, and for good reason. RegExes provide coded shortcuts to identify sequences of characters by using a mix of special wildcard characters along with the characters you wish to match against.</p><p>There are wildcard characters that will match your string against multiple occurrences of a subsequence in a row. You can specify that there should be exactly <strong>one</strong> match of the sequence in the string being checked. There's even a wildcard to tell you that the next character in the sequence is not a wildcard. (the backslash '')</p><h2>The Yellow Tiles</h2><p>Let's take a look at how we might encode a sequence that includes three yellow tiles <strong>s</strong>, <strong>r</strong> and <strong>e</strong>.</p><p>Regular expressions contain a special sequence which is called <strong>lookahead</strong>. You precede the potential match with a question mark and equal sign, and surround the entire subsequence with parens.<br><br>It is special in that it will look at the pending match and see if it can find the sequence, but it doesn't <strong>eat</strong> the sequence (in other words, the sequence remains intact for other possible searches). This is perfect for taking our list of candidates and only including those with <strong>yellow</strong> matches.</p><p>so three yellow letters <strong>SRE</strong> translate to:</p><pre><code>  (?=.*s.*)(?=.*r.*)(?=.*e.*)
</code></pre><p>If this is enough to get you started, then by all means go off and code a different solution from the one that follows.<br><br>This might be fine for some people, but I'm going to want to code something a bit less cryptic.</p><p>That's not to say I won't be using regular expressions in my solution. I just won't use such esoteric sequences. I also won't be looking at the entire sequence at once. I will cycle through each of the five positions in the string. This way I only have to match one character at a time. Our working domain of less than 5000 five-letter words doesn't demand the most efficient approach possible, and I prefer to work with code I can understand when I first view it.</p><p>The two special characters I will use to accomplish this are <strong>[</strong> and <strong>]</strong>. In the RegEx world this means any of the characters between the brackets can match. If I don't follow with sequence with any special characters to indicate frequency, this will only match against one character. The previous definition for matching yellow <strong>sre</strong> is now represented as</p><pre><code>[sre]
</code></pre><p>Let's say I have my yellow tile letters from my current turn and I want to remove all the words in the main list that don't contain these letters. After all, I'm trying to reduce the candidate pool with each turn.<br><br>All I need to do is wrap these letters inside square brackets and then filter the list using the regular expression just mentioned. The result is understandable Swift code.<br><br><br>In order to make that happen, I need to write this <strong>yellow()</strong> method.</p><pre><code>    <span class="comment">/// returns all items with the any of the specified letters in it</span>
    <span class="keyword">func</span> yellow(<span class="keyword">_</span> yellowChars: <span class="type">String</span> = <span class="string">"[SRE]"</span>) -&gt; [<span class="type">String</span>] {
        mainList.<span class="call">filter</span>({ 
            $0.<span class="call">range</span>(of: yellowChars, 
            options: .<span class="dotAccess">regularExpression</span>) != <span class="keyword">nil</span> 
        })
    }
</code></pre><p>Using the filter method on the Array&lt;String&gt;, I iterate through all the words in the main list and only return those words that contain at least one of these letters (the result of the match is non-nil).<br><br>starting here we lose the headlines again (adding this line brought them back)</p><h2>The Black Tiles</h2><pre><code>     <span class="keyword">func</span> black(<span class="keyword">_</span> blackChars: <span class="type">String</span> = <span class="string">"[EIOUY]"</span>) -&gt; [<span class="type">String</span>] {
        mainList.<span class="call">filter</span>({ $0.<span class="call">range</span>(of: blackChars, options: .<span class="dotAccess">regularExpression</span>) == <span class="keyword">nil</span> })
    }
</code></pre><p>This is very similar to the yellow method. Instead of including entries that match, entries are included only if there is not a match against any of the characters in the reference string.</p><h2>The Green Tiles</h2><p>I will provide two solutions using two different data structures to process the green tiles.</p><p>In this first (less object-oriented) approach I will be working with an array of optional strings. (I'll leave it as an exercise for the reader if you prefer working with optional characters)<br>˙</p><pre><code><span class="keyword">var</span> solvedLetters: [<span class="type">String</span>?] = [<span class="keyword">nil</span>, <span class="keyword">nil</span>, <span class="keyword">nil</span>, <span class="keyword">nil</span>, <span class="keyword">nil</span>]
</code></pre><p>The advantages of this simplistic approach is that you have position information (all five tiles are represented, albeit without individual labels) which allow for direct iteration through the elements of the <strong>solvedLetters</strong> array.</p><p>Taking the passed in parameter and iterating through its elements, we can quickly reduce the size of the pool of candidates by eliminating all words that don't have <strong>green</strong> letters in the indicated position. We simply skip over processing an empty/nil element.</p><pre><code>    <span class="keyword">func</span> green(<span class="keyword">_</span> greenChars: [<span class="type">String</span>?]) {
        <span class="keyword">for</span> (index, item) <span class="keyword">in</span> greenChars.<span class="call">enumerated</span>() {
            <span class="keyword">if let</span> item {
                mainList = mainList.<span class="call">filter</span>({ $0[index] == item })
            }
        }
</code></pre><p>Personally I prefer a more object oriented solution, and my final solution makes use of a <strong>Tile</strong> object which includes its letter's position within the final solution.<br><br><br><strong><em>[the second solution omitted in this excerpt]</em></strong></p><h2>Give Me Your Feedback!</h2><p>If you followed along and found my explanations useful, let me know. If I glossed over a point you don't quite get, drop me a line. Click on my email link (below my avatar)<br><br>## Potential Projects</p><ul><li>Wordle</li><li>A SwiftUI Picker Using SF Symbols</li><li>FloodFill Algorithm (what is missing from the published project?)</li><li>Combine</li><li>The Swift Concurrency Model and Structured Concurrency</li><li>SwiftComposableArchitecture (TCA)</li><li>Parsing Markdown (Using the parser library from PointFree)</li><li>Xcode Unit Tests</li><li>SwiftUI Property Wrappers</li><li>SwiftUI View Builders</li><li>Javascript and iOS</li><li>Refactoring</li><li>JSON and REST APIs</li></ul><p>As I mentioned earlier, I have a number of tutorials in various stages of completion, and I am also coming up with new ideas as I see new APIs and tools become available.<br><br>## Links<br><br><a href="https://www.google.com/search?&rls=en&q=swift+array+remove+matching+element&ie=UTF-8&oe=UTF-8">Google Search</a><br><br><a href="https://github.com/Mozahler/FloodFill">Mozahler - FloodFill</a><br><br><a href="https://www.theverge.com/2022/2/15/22934587/wordle-solutions-changed-new-york-times">Wordle Solutions Changed</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/swift/SPM%20and%20Package%20dot%20Swift</guid><title>SPM and Package dot Swift</title><description>SPM and the Benefits of Using Packages</description><link>https://github.com/mozahler/mozahler.github.io/swift/SPM%20and%20Package%20dot%20Swift</link><pubDate>Wed, 19 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Swift Package Management</h2><p>Whether you realize it or not, SPM (the Swift Package Manager) really deserves to be your best friend - your favorite tool in the toolbox. The more you understand what it does and how to configure it, the more productive you'll become.<br>It just isn't always appropriate for you to write every bit of code in your project these days. It makes no sense to reinvent the wheel, and there's a large enough body of open source code that is well-tested and available for you to use almost immediately in your projects. If you've worked with Carthage (my old favorite) or CocoaPods (when I must), then you understand the benefits of bringing someone else's code into your project. And you understand there's a learning curve involved in learning how to configure and maintain these additions. SPM has been created with an enormous amount of input from the coding community, and builds on the successes of these and other third-party code managers. Xcode plays well with SPM.</p><p>The best thing about using SPM is that you are typically working with the actual source code (I'm not going to get into binary packages here - but they are sometimes an option as well.) If something doesn't work exactly as you need it, you can make a local copy of the package and update the code yourself. Add some tests and you might even be able to make a PR for someone at GitHub. But let's not get ahead of ourselves.</p><h3>A Great Way to Silo Your Code</h3><p>Almost all code I write these days is created within packages. My Xcode project directory typically has an AppNameApp.swift and a ContentView.swift file plus the usual resources/assets, etc. I create a workspace, drag my new project into it, and then drag the (local) component packages into the project (at the top left) as needed. If it’s a new project, then I typically have a new package as well, and I import it in my ContentView file where I call the landing view of my app. It’s a little bit of upfront maintenance that pays off almost right away. Once you have performed a full compile of your project, then only the package you are currently updating needs to be recompiled when it’s time to try out your changes. Compiles are quicker and you can see the latest results right away.</p><h3>Modules</h3><p>Swift organizes code into <code>modules</code>. Each module specifies a namespace and enforces access controls on which parts of that code can be used outside of the module. A program may have all of its code in a single module, or it may import other modules as dependencies. This vertical siloing of your app's functionality helps to reduce tight coupling of your code and can lead to a more composable architecture where you swap modules in and out as needed. This allows you to share functionality across multiple apps that don't know anything about each other.</p><p>When you use a separate module for code that solves a particular problem, that code can be reused in other situations. For example, a module that provides functionality for making network requests can be shared between a photo sharing app and a weather app. Once again, using modules lets you build on top of other developers’ code (or your own) rather than reimplementing the same functionality yourself. (DRY - Don't Repeat Yourself)</p><h3>Packages</h3><p>A package consists of Swift source files and a manifest file. The manifest file, called <code>Package.swift</code>, defines the package’s name and its contents using the PackageDescription module. It can have one or more targets. Each target specifies a(typically executable) product and may declare one or more dependencies.</p><h2>Benefits of Using Packages</h2><ul><li>You can share code between projects or between targets within a project.</li><li>Each target in the package is compiled as a module.<ul></ul></li></ul><p>&gt;Xcode will automatically create a resource bundle and an internal static extension on Bundle if your target includes resources.</p><p>This means you can add gifs, pngs, audio and video files to the bundle, rather than the main bundle of the app itself. You decide what structure you want for your app, but this provides another option for siloing your data. &gt;Xcode recognizes the most common types of resources and will automatically configure the package for them. This includes <code>Core Data</code> and asset catalogs.</p><p>&gt;<code>.json</code>, <code>.txt</code>, <code>.md</code> files are considered custom resources (there are others as well) and must be added to the Package.swift manifest in order for them to be included in the target. You can include items on the individual file level, or entire folders can be specified at once.</p><h2>Keeping things Organized</h2><p>You may have strong opinions on how you organize your projects. Workspaces are definitely old-school (yet still have their place), and <code>Packages</code> provide many of the same features/benefits. But keep in mind that they <strong>can</strong> co-exist. You can decide whether they should. I like to keep everything in a workspace, since it cuts down on duplication. (there's lots more to say about how it does that - derived data, sharing binaries between included packages, etc.)</p><p>This is what <code>Apple</code> has to say about using workspaces:</p><p>&gt;Because indexing is done across the whole workspace, code completion, Jump to Definition, and all other content-aware features work seamlessly through all projects in the workspace. Because refactoring operations act across all the content of the workspace, you can refactor the API in a framework project and in several application projects that use that framework all in one operation. When building, one project can make use of the products of other projects in the workspace</p><h4>Projects in a Workspace Share a Build Directory</h4><p>By default, all the Xcode projects in a workspace are built in the same directory, referred to as the workspace build directory. Each workspace has its own build directory. Because all of the files in all of the projects in a workspace are in the same build directory, all of these files are visible to each project. Therefore, if two or more projects use the same libraries, you don’t need to copy them into each project folder separately.</p><p>Xcode examines the files in the build directory to discover implicit dependencies. For example, if one project included in a workspace builds a library that is linked against by another project in the same workspace, Xcode automatically builds the library before building the other project, even if the build configuration does not make this dependency explicit. You can override such implicit dependencies with explicit build settings if necessary. For explicit dependencies, you must create project references.</p><p>Each project in a workspace continues to have its own independent identity. To work on a project without affecting—or being affected by—the other projects in the workspace, you can open the project without opening the workspace, or you can add the project to another workspace. Because a project can belong to more than one workspace, you can work on your projects in any number of combinations without having to reconfigure any of the projects or workspaces.</p><p>You can use the workspace’s default build directory or you can specify one. Note that if a project specifies a build directory, that directory is overridden by the build directory of whatever workspace the project is in at the time you build the project. Naturally, this sharing of code should also contribute to better compile times.</p><h3>Xcode Can Help</h3><p>In Xcode, create a new, empty workspace. Once created, find the directory for the package you want to work on and drag that directory into the project navigator in Xcode. Xcode will create a Swift Package and download the dependencies. Easy Peasy.</p><p>Targets specify in detail how a product/binary (i.e., an application or library) is built. They include build settings, such as compiler and linker flags, and they define which files (source code and resources) actually belong to a product. When you build/run, you always select one specific target using the <code>Scheme Manager</code> (the window at the top center of the screen when Xcode is FullScreen).</p><p>It is likely that you have a few targets that share code and resources. These different targets can be slightly different versions of an app (iPad/iPhone, different brandings,…) or test cases that naturally need to access the same source files as the app. All these related targets can be grouped in a project. While the project contains the files from all its targets, each target picks its own subset of relevant files. The same goes for build settings: You can define default project-wide settings in the project, but if one of your targets needs different settings, you can always override them there.</p><h2>Links</h2><p><a href="https://forums.swift.org/t/how-to-produce-multiple-libraries-from-one-package/18478/2">Multiple Libraries rom One Package</a><br><a href="https://www.fabrizioduroni.it/2020/10/19/swift-package-manager-resources/">Swift Package Manager Resources</a><br><a href="https://betterprogramming.pub/how-to-add-resources-in-swift-package-manager-c437d44ec593">Adding Resources to a Swift Package</a><br><a href="https://jllnmercier.medium.com/swift-package-manager-integrating-resources-37dbea669af">SPM Integrating Resources</a><br><br><a href="https://holyswift.app/introduction-to-app-modularisation-with-swift-package-manager-a-tale-to-be-told">Leonardo Maia Pugliese</a><br><br><a href="https://stackoverflow.com/questions/39499281/what-is-the-difference-between-a-swift-package-and-a-module">Package vs. Module</a><br><br><a href="https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Workspace.html">Apple Documentation - Xcode Concepts</a><br><a href="https://augmentedcode.io/2020/07/05/separating-code-with-swift-packages-in-xcode/">Separating Code With Swift Packages</a><br><br><a href="https://forums.swift.org/t/xcode-project-with-spm-dependencies/18157/2">forums.swift.org Jeremy David Giesbrecht</a><br><br><a href="https://stackoverflow.com/questions/11618407/xcode-workspace-vs-nested-projects">StackOverflow</a><br><br><a href="https://stackoverflow.com/questions/21631313/xcode-project-vs-xcode-workspace-differences">SO II</a><br>.pct 98</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/The%20Publish%20Tutorial</guid><title>The Publish Tutorial</title><description>Starting From the Top - Setting Up the Initial Site</description><link>https://github.com/mozahler/mozahler.github.io/publish/The%20Publish%20Tutorial</link><pubDate>Mon, 17 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<p>First of all, you don't need me to teach you how to set up your website. I've been doing this for a couple of days. There are many great, informative resources out there, and I've provided links to some of those I found particularly helpful. (check out Danijela's excellent overview)</p><h3>Every website created with Publish is a Swift package. When deployed, a pre-defined set of steps get executed that builds and renders the HTML components and styles them with CSS.</h3><p>It can be a bit confusing to work in so many languages at once: markdown, html, css, swift, not to mention the DSL's you have available to leverage stylistic and other changes across your projects. <strong>Publish</strong>, <strong>Ink</strong>, <strong>Splash</strong> are tools written to make the transition from markdown to html possible without you having to learn the ins and outs of web programming. Ultimately the idea is to express your intentions in Swift and to allow the publishing pipeline to transform the information into the correct html. It's a big ask. And it is doable.</p><p>In an attempt to stay <strong>meta</strong> I will try to explain how to get the ball rolling with your own website.</p><p>While the <strong>Publish</strong> package by John Sundell is an amazing accomplishment, there aren't a lot introductory tutorials that go beyond installing the standard boiler plate he provides out of the box. There are some well-written articles available for customizing pieces of your setup, and some highly recommended ones are linked below. On a separate page of this section I have documented part of my journey towards setting up this site.</p><p>One thing you need to do while working on putting your site together is to get to know what steps are involved, and what those steps actually do. Go ahead and peek into the <strong>Output</strong> folder after building and running your project. Is everything where you thought it would be placed? Are you puzzled by any of the content?</p><p>To give you an example of the roadblocks beginners can run into, I struggled with displaying images.</p><p>I made sure I had an images folder in the <strong>Resources</strong> folder</p><p><a href="https://deirdre.dev/wrestling-with-publish/">Wrestling With Publish</a></p><p>This is an excellent collection of links to sites that have been customized and the GitHub repository for the site (sometimes just the latter). In my companion piece linked above I discuss what I found when I looked into these sites.</p><h3>Progressing to the Next Step</h3><p>There are many ways to improve your site once you have gotten under way. Perhaps you feel it is lacking something, but you can't quite put your finger on what it might be. You can get a feel for how others have extended the basic setup. You can take a look at their site, and if you see something that catches your eye, go to their GitHub project and figure out how it was done. If that seems a little advanced for you, then start by browsing any of the tutorials that explain how to customize a theme or add publishing steps to the pipeline.</p><h3>Exposure</h3><p>Try clicking on one of the links where someone describes a particular enhancement they made and how they accomplished it. Just surfing through a site might give you some ideas on how to spruce up your own site.<br><br>### <strong>main.swift</strong></p><p>main.swift is a file which contains a configuration information for your website. In this file you can add sections, specific item metadata, website properties, and configure publishing steps. Of course you can add other files, extend other protocols or processes in ways that better serve your specific needs. In order to do this well, however, it helps if you understand the underlying structure - including how things get done.</p><h2>Plugins</h2><p>Plugins are great for extending the capabilities of your site. They can be a little difficult to work with, however.<br>Adding a plugin to the Package.swift file isn't difficult, but there are some "gotchas" that you need to be aware of.<br>As time goes on it becomes easier to work with the SPM in Xcode. But there are still times when the compiler gets confused and you need to clean your build folder and exit the app.<br>Sometimes, miraculously, everything can start compiling again after performing this little dance.</p><h3>Minimum Version</h3><p>If you don't specify a miminum version of macOS in your package.swift file you may find it won't compile. The reason may seem a bit cryptic - the compiler tells you your target supports an old version of the OS, but you haven't mentioned one anywhere.</p><p>The solution isn't difficult: you need to add the <strong>platforms</strong> parameter to your initializer in <strong>Package.swift</strong>.<br>If you're using a pre-existing <strong>Package.swift</strong> file you may find it needs some updating.</p><p>There's a line at the top of <strong>Package.swift</strong> that tells the package manager which version of swift it can support.<br><br><br>// swift-tools-version:5.7<br>// The swift-tools-version declares the minimum version of Swift required to build this package.<br><br>On Apple's Developer Site, You'll find a slightly more detailed explanation:</p><h3>The Swift tools version declares the version of the PackageDescription library, the minimum version of the Swift tools and Swift language compatibility version to process the manifest, and the required minimum version of the Swift tools to use the Swift package.</h3><h3>Update the tools version after an Xcode Upgrade</h3><p>If this version is out of date, you may not even be able to specify the version of the OS you want. It may not have existed when that version of tools was first in use. If you are forced to provide legacy support this may not be an option for you. You may have to plan the upgrades to your tools more carefully than I.</p><h2>Links</h2><p><a href="https://deirdre.dev/wrestling-with-publish/">Wrestling With Publish</a></p><p><a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">Danijela Vrzan</a></p><p>.pct 96</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/A%20Survey%20of%20Other%20Sites</guid><title>A Survey of Other Sites</title><description>How Can You Set Up Your Own Site? How Have Others Done It?</description><link>https://github.com/mozahler/mozahler.github.io/publish/A%20Survey%20of%20Other%20Sites</link><pubDate>Thu, 13 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>How do I set up my own web site when I don't what my options are?</h2><p>By following the install instructions on the <code>Publish</code> website, or any of the many introductory pieces available online, I can set up a basic web site in minutes. That's pretty incredible and a testament to John Sundell's hard work at piecing together the infrastructure needed to transform a bunch of markdown and image files into a website.</p><p>The default setup is a good place to start, but you will want to display your information your way. In my opinion, a good early step is to learn what others have done to customize their own sites. The list of sites that have shared their implementation is probably larger than you'd think. One of the many sites I visited had a page dedicated to exploring some of these sites. It's called <code>Wrestling With Publish</code>, and there's a link at the bottom of the page. I recommend you visit the sites yourself and see how they work.</p><h2>Some Published Sites (and a theme or two)</h2><p>I downloaded quite a few of these projects and visited each site built by the projects (where available). As I navigated through each site, I tried to identify for myself what was different in each, as well as what they had in common. Doing this I was able to pick out new details I had missed when just casually glancing at other sites.</p><h3>How Do They Differ From Each Other?</h3><p>You'd be surprised at how much customization some people have put into their website. Sometimes it was the way the information was being presented, but at others it was more about how things were organized - how everything fit together. And of course color choices can make a site stand out, as well as images (gifs, jpgs, pngs are all easily integrated into the site).</p><p>When I found a feature that seemed new or useful, I made a note of it so I could return later and match the site with the source code published on GitHub. This helped me come up with a short list of features that I wanted to add to my own site.</p><h2>Weissazool - A Blog With Images</h2><p>Let's start by checking out this site:<br><br><a href="https://weissazool.github.io/blog/2020-07-23-sotd/">Itabashi Tenso Shrine</a></p><p>This features a simple layout made elegant with the addition of .jpg images. It's a nice example of image and post together and how to accomplish it. Each SOTD (Shrine of the Day) entry is the equivalent of a cell in a tableview complete with an image and link to a full page entry.</p><p>The yaml tags at the top of the file include a line like this:</p><pre><code>image: ./../../sotd/tofukuji.<span class="property">jpeg</span>
</code></pre><p>This specifies a path to the image that is displayed with the item. The image path can be retrieved easily during the build process by referencing the metadata property</p><pre><code>       .<span class="call">unwrap</span>(item.<span class="property">imagePath</span>) {
        .<span class="call">img</span>(.<span class="call">src</span>($0))
      }
</code></pre><h5>An Actual Entry</h5><pre><code>[&lt;figure&gt;
  &lt;img src=<span class="string">"./../../sotd/kinoene.jpeg"</span>
  alt=<span class="string">"A lamp post advertising Kinoene soy sauce."</span>/&gt;
  &lt;figcaption&gt;<span class="type">Caption</span>&lt;/figcaption&gt;
&lt;/figure&gt;](./../../sotd/kinoene.<span class="property">jpeg</span>)
</code></pre><h5>The Template</h5><pre><code>[&lt;figure&gt;
  &lt;img src=<span class="string">"./../../sotd/shrine-image.jpeg"</span>
  alt=<span class="string">"alt text"</span>/&gt;
  &lt;figcaption&gt;<span class="type">Caption</span>&lt;/figcaption&gt;
&lt;/figure&gt;](./../../sotd/shrine-image.<span class="property">jpeg</span>)
</code></pre><h3>Sources</h3><p>Surprisingly, this isn't just <code>.swift</code> files. but a mix of <code>.swift</code>, <code>.scss</code>, and <code>.png</code> files - as well as the template <code>.md</code> file already mentioned. There is only one other <code>.swift</code> file besides <code>main</code>, and that file extends <code>Theme</code> to include a variable which returns the custom theme for the site</p><pre><code><span class="keyword">extension</span> <span class="type">Theme</span> <span class="keyword">where</span> <span class="type">Site</span> == <span class="type">Weissazool</span> {
  <span class="comment">/// Modified from the default "Foundation" theme that Publish ships with, a very
  /// basic theme mostly implemented for demonstration purposes.</span>
  <span class="keyword">static var</span> weissazool: <span class="type">Self</span> {
    <span class="type">Theme</span>(
      htmlFactory: <span class="type">WeissazoolHTMLFactory</span>(),
      resourcePaths: [<span class="string">"Resources/theme/styles.css"</span>]
    )
  }
}
</code></pre><p>In this file you'll also find his definition of an <code>HTMLFactory</code>. He implements the required methods, plus a couple of others.</p><pre><code>   <span class="keyword">func</span> head(for location: <span class="type">Location</span>, on site: <span class="type">Site</span>) -&gt; <span class="type">Node</span>&lt;<span class="type">HTML</span>.<span class="type">DocumentContext</span>&gt; {]
  
  <span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>,
                     context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {}

  <span class="keyword">func</span> makeSectionHTML(for section: <span class="type">Section</span>&lt;<span class="type">Site</span>&gt;,
                       context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {


  <span class="keyword">func</span> makeItemHTML(for item: <span class="type">Item</span>&lt;<span class="type">Site</span>&gt;,
                    context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {}

  <span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>,
                    context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {}

  <span class="keyword">func</span> makeTagListHTML(for page: <span class="type">TagListPage</span>,
                       context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {}

  <span class="keyword">func</span> makeTagDetailsHTML(for page: <span class="type">TagDetailsPage</span>,
                          context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {}
</code></pre><p>Finally, he extends Plot.Node</p><p>Plot (also written by John) is a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL - Domain-specific language</a> which enables you to write swift code that can be automatically translated into HTML in a more type-safe way.</p><p>&gt;Plot treats all elements and attributes that a document contains as nodes. When using the Plot DSL, each time you create a new element, or add an attribute to an existing one, you are creating a node. Nodes can also contain just text, which can either be escaped or treated as raw, pre-processed text. Groups can also be created to form components.</p><pre><code>   <span class="keyword">static func</span> wrapper(<span class="keyword">_</span> nodes: <span class="type">Node</span>...) -&gt; <span class="type">Node</span> {}

  <span class="keyword">static func</span> header&lt;T: <span class="type">Website</span>&gt;(
    for context: <span class="type">PublishingContext</span>&lt;<span class="type">T</span>&gt;,
    selectedSection: <span class="type">T</span>.<span class="type">SectionID</span>?
  ) -&gt; <span class="type">Node</span> {}
  
  <span class="keyword">static func</span> itemList&lt;T: <span class="type">Website</span>&gt;(for items: [<span class="type">Item</span>&lt;<span class="type">T</span>&gt;], on site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {}
    
  <span class="keyword">static func</span> tagList&lt;T: <span class="type">Website</span>&gt;(for item: <span class="type">Item</span>&lt;<span class="type">T</span>&gt;, on site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {}

  <span class="keyword">static func</span> footer&lt;T: <span class="type">Website</span>&gt;(for site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {}
</code></pre><h2>Joe Blau</h2><p><a href="https://joeblau.com/">Joe Blau</a></p><p>I love this site. He calls himself a <code>Design Engineer</code>, and it is clear that this is his thing.</p><h3>Very Individualistic</h3><p>The landing page has an old school look. It looks like you are viewing the console of a terminal, and he is issuing the <code>blau</code> command with different parameters - each set of output corresponds to category of a classic resume. The unix-like output is similar to a man page and provides a maximum amount of information while taking up very little space. There are no links in this top portion of the page - they are all relegated to the bottom of the page in two sections providing information on how to contact him. One section provides his email and phone number, the other is a list of his socials.</p><p>To complete the illusion, the final line displays a blinking cursor on a blank command line.</p><p>Take a look at one of links: <a href="https://conquer.earth/joeblau">Conquer Earth</a></p><p>The last time I looked, he had visited <strong>276</strong> places around the world.</p><p>He has broken out his Plot.Node extensions into multiple files</p><p>CallToAction<br>Features<br>Footer<br>Header<br>Hero<br><br>Just take a look at his "read me first" page. His picture at the top, next a row of "buttons" that highlight as you scroll over them. One each for twitter, insta, GitHub and his home site.</p><p>What follows mirrors the struct of the <code>blog</code> folder described under <code>Weissazool</code>s <code>Content</code> folder. What's interesting here is that you don't see the entire article. At an appropriate breakpoint in the content there is a <code>Continue Reading</code> button. [will need to see how that is done]</p><p>The <code>Next</code> button on the bottom of the page has the same appearance (including highlighting as you scroll over them) as the buttons at the top of the page. Tap on the button and you'll see that the subsequent pages display the page number at the top above a divider/separator/line.</p><p>Joe has given a lot of though as to how to organize his data, and here are just two of the protocols he's defined for himself:</p><pre><code><span class="keyword">public protocol</span> BulletPointable {
    <span class="keyword">var</span> symbol: <span class="type">String</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> tags: [<span class="type">String</span>]? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> images: [<span class="type">String</span>]? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> title: <span class="type">String</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> description: <span class="type">String</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> url: <span class="type">URL</span>? { <span class="keyword">get set</span> }
}

<span class="keyword">public protocol</span> BlauThemable: <span class="type">Website</span> {
    <span class="keyword">var</span> hero: <span class="type">HeroSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> header: <span class="type">HeaderSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> features: <span class="type">FeatureSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> callToAction: <span class="type">CallToActionSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> footer: <span class="type">FooterSectionable</span>? { <span class="keyword">get set</span> }
}
</code></pre><p>I want to point out two of the factory methods he's implemented.</p><pre><code>        <span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>,
                           context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
            <span class="type">HTML</span>(
                .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
                .<span class="call">head</span>(for: index,
                      on: context.<span class="property">site</span>,
                      titleSeparator: <span class="string">" | "</span>,
                      stylesheetPaths: <span class="call">buildStyleSheettPaths</span>(for: context.<span class="property">site</span>),
                      rssFeedPath: .<span class="dotAccess">defaultForRSSFeed</span>,
                      rssFeedTitle: <span class="keyword">nil</span>),
                .<span class="call">body</span>(
                    .<span class="call">header</span>(for: context.<span class="property">site</span>),
                    .<span class="call">main</span>(
                        .<span class="call">features</span>(for: context.<span class="property">site</span>),
                        .<span class="call">callToAction</span>(for: context.<span class="property">site</span>)
                    ),
                    .<span class="call">footer</span>(for: context.<span class="property">site</span>)
                )
            )
        }
</code></pre><pre><code>       <span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>,
                          context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
            <span class="type">HTML</span>(
                .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
                .<span class="call">head</span>(for: page,
                      on: context.<span class="property">site</span>,
                      titleSeparator: <span class="string">" | "</span>,
                      stylesheetPaths: <span class="call">buildStyleSheettPaths</span>(for: context.<span class="property">site</span>),
                      rssFeedPath: .<span class="dotAccess">defaultForRSSFeed</span>,
                      rssFeedTitle: <span class="keyword">nil</span>),
                .<span class="call">body</span>(
                    .<span class="call">header</span>(
                        .<span class="call">h1</span>(.<span class="call">text</span>(page.<span class="property">title</span>)),
                        .<span class="call">h3</span>(.<span class="call">text</span>(page.<span class="property">description</span>))
                    ),
                    .<span class="call">main</span>(
                        .<span class="call">section</span>(
                            .<span class="call">class</span>(<span class="string">"max-section"</span>),
                            page.<span class="property">body</span>.<span class="property">node</span>
                        )
                    ),
                    .<span class="call">footer</span>(for: context.<span class="property">site</span>)
                )
            )
        }
</code></pre><p>So much power in so few lines.</p><p>Extra features: beautiful capsule buttons, excerpted articles with buttons to view the entire entry.</p><p>Because the source code for the actual site isn't posted on GitHub (only the theme is published) I will have to come back to this after I've explored some of the other sites. Obviously, this is my favorite so far.</p><h2>Povilas Staškus</h2><p><a href="https://www.staskus.io/">Povilas Staškus - iOS Developer</a></p><p>Besides <code>Publish</code> he uses the <code>Splash</code> plugin (<code>SplashPublishPlugin</code>). Don't assume that means there are no bells or whistles here. His blog pages are exceptionally well thought-out and present well.</p><p>The page layout consists of a row at the top (the four .md files at the base of the <code>Content</code> folder), followed by a two column layout. On the left is an avatar and social links, on the right is the scrolling list of blog entries found in his <code>posts</code> folder (directly under <code>Content</code>) with a <code>RECENT POSTS</code> header.</p><p>His buttons are colorized and rather than changing their background color when hovered over, an underline appears underneath the button label's text</p><p>Each row or cell has similar yaml, which provides most of the formatting applied.</p><pre><code>---
title: <span class="type">Building</span> a real-world iOS app (<span class="type">Part</span> <span class="number">1</span>): <span class="type">Introduction</span>
date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">11 12</span>:<span class="number">00</span>
tags: tutorial, iOS, swift
excerpt: <span class="type">We</span>'ll be creating and releasing an iOS application by showing a real thinking process, going through essential steps and providing the motivation behind them.
---
</code></pre><p>The title also functions as a link - scrolling over it displays an underline, tapping on it brings up the full entry on its own page.</p><p>Beside a folder full of extensions to Plot.Node (I'm detecting a pattern here), there are 3 additional files for a date formatter, html factory and a Theme identifier.</p><pre><code><span class="keyword">extension</span> <span class="type">DateFormatter</span> {
    <span class="keyword">static var</span> blog: <span class="type">DateFormatter</span> = {
        <span class="keyword">let</span> formatter = <span class="type">DateFormatter</span>()
        formatter.<span class="property">dateStyle</span> = .<span class="dotAccess">long</span>
        <span class="keyword">return</span> formatter
    }()
}
</code></pre><p>Nothing fancy, the standard <code>.long</code> date style. It does a nice job of keeping the interface clean.</p><p>Other notes:</p><p>&gt;Fairly comprehensive, includes avatar links to socials. Professional in appearance.<br><a href="https://yusufozgul.com/">index | Yusuf Özgül | Blog | Resume | Portfolio</a></p><p>The top of the page has his name followed by the major components of the site (buttons that highlight as they are scrolled over) all over a dark background (foreground/text is white, background is black, highlighted background on the buttons is blue)</p><p>The blog list shows the most recent posts, a button at the bottom displays all posts (sorted by date descending)</p><p>He has a <code>Contact</code> page that uses <code>Typeform</code></p><p>His <code>Projects</code> page lists his open source work on GitHub, and apps in the AppStore</p><p>Despite the relatively simple theme, he’s got a fairly intricate set of conditionals, which may help you sort out how to write your own theme. Also interesting is a loader class that creates the static pages of the site. Uses <code>SplashPublishPlugin</code> and many others. In fact, he has the most plugins of any of the projects I've discussed:</p><pre><code>     targets: [
        .<span class="call">executableTarget</span>(name: <span class="string">"YusufozgulCom"</span>,
        dependencies: [
                            <span class="string">"Publish"</span>,
                            <span class="string">"ReadingTimePublishPlugin"</span>,
                            <span class="string">"TwitterPublishPlugin"</span>,
                            <span class="string">"SplashPublishPlugin"</span>,
                            <span class="string">"ImageAttributesPublishPlugin"</span>,
                            <span class="string">"LinkAttributesPublishPlugin"</span>,
                            <span class="string">"GistPublishPlugin"</span>,
                            <span class="string">"VerifyResourcesExistPublishPlugin"</span>,
                            <span class="string">"YoutubePublishPlugin"</span>,
                            <span class="string">"CNAMEPublishPlugin"</span>,
                          ])
    ]
</code></pre><p>This is reflected in the most involved <code>.publish()</code> command we've seen so far:</p><pre><code><span class="keyword">try</span> <span class="type">YusufozgulCom</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">yusufozgulcom</span>,
                            indentation: <span class="keyword">nil</span>,
                            at: <span class="keyword">nil</span>,
                            rssFeedSections: [.<span class="dotAccess">blogs</span>, .<span class="dotAccess">projects</span>],
                            rssFeedConfig: <span class="keyword">nil</span>,
                            additionalSteps: [.<span class="call">installPlugin</span>(.<span class="call">readingTime</span>(wordsPerMinute: <span class="number">40</span>)),
                                              .<span class="call">generateSiteMap</span>(),
                                              .<span class="call">installPlugin</span>(.<span class="call">verifyResourcesExist</span>()),
                                              .<span class="call">generateRSSFeed</span>(including: [.<span class="dotAccess">blogs</span>, .<span class="dotAccess">projects</span>]),
                                              .<span class="call">removeAllItems</span>(in: .<span class="dotAccess">blogs</span>, matching: .<span class="keyword">init</span>(matcher: { item <span class="keyword">in</span>
                                                item.<span class="property">metadata</span>.<span class="property">isDraft</span> ?? <span class="keyword">false</span>
                                              })),
                                              .<span class="call">installPlugin</span>(.<span class="call">generateCNAME</span>(with: [<span class="string">"yusufozgul.com"</span>, <span class="string">"www.yusufozgul.com"</span>]))
                            ],
                            plugins: [.<span class="call">twitter</span>(),
                                      .<span class="call">youtube</span>(),
                                      .<span class="call">gist</span>(renderer: <span class="type">ColorGistRenderer</span>()),
                                      .<span class="call">linkAttributes</span>(),
                                      .<span class="call">imageAttributes</span>(),
                                      .<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>),
                                      <span class="comment">//.publishGallery()</span>
                            ])
</code></pre><p>.pct 92</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/Writing%20Tests</guid><title>Writing Tests</title><description>The Role of Testing in Your Development Process</description><link>https://github.com/mozahler/mozahler.github.io/posts/Writing%20Tests</link><pubDate>Wed, 12 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Tests and Test Driven Development</h2><p>It would be a mistake to think that you waste your time when writing tests. Tests give back in many ways. In fact there’s a whole philosophy of coding devoted to Test Driven Development (TDD). I want to spend a few minutes describing this approach.<br><br>In TDD you write the test before you write the actual code. When you write a test and execute it, it should fail. After all, you found a problem, documented it, and wrote a test that uncovers the problem. But the first time you run your test, you haven’t yet fixed the code, so you get an error. If you don't, then you need to retrace your steps. All in all, this is a good thing.<br><br>### Oh, the Circularity<br><br>You’ve written a test, run the test, it fails. Now you fix your code.<br><br>Once you’ve written your fix, you run your test. Does it succeed? Does the code now work as it was meant to? It’s possible that the answer to one of these questions is a yes and the other is a no. Maybe your test has a bug?<br><br>The biggest benefit of using TDD, in my opinion, is that it allows you to refactor more easily. In fact, there’s a school of thought that says that unless you have tests that prove that your changes fixed the errors they were designed to catch, that it’s not considered refactoring.<br><br>If you have set up a harness of tests that prove that your code is working, and do some refactoring - how hard is it to run your tests on the new code? It’s as easy as can be, you just click on a button in Xcode and run your test code. If you did your work correctly, then your tests will pass. If your tests fail then at least you have an insight into what you didn’t account for in the original code.</p><p>Of course, there’s no guarantee that your code will always work after writing a test. Maybe in the process of fixing your broken tests you are able to write a couple more. The goal isn't the highest number of tests possible, it is to get the best overall coverage of your code. Certainly, if you are about to change something fundamental in your interface, you want to make sure you have a suite of tests that prove that your interface works as designed.<br><br>You'll find that over time the way you both write your tests and your code evolve to make this iterative approach more efficient.<br><br>## Would You Like to Learn More About Test Driven Development?<br><br>Check out the links below for a number of video tutorials on Test Driven development. I absolutely admire those who work this way. You don't want to be one of those developers who tends to dive into coding far too early, and then spends a great deal of time halfway through their project refactoring and getting it to where it needs to be. TDD is the opposite of that. I could definitely write more about it if people were interested. Let me know.<br><br>## Summary<br><br>Just as you shouldn’t code without creating backups regularly, you can’t refactor without tests. Ask anyone who has had to refactor a medium to large app. You need to know when you’ve messed up. As soon as possible. You also need that reassurance you get when you’ve run all your tests and they all pass. It will give you the boost you need to forge ahead and make even more changes.<br><br>## Links</p><p><a href="https://chris.eidhof.nl/post/becoming-a-better-programmer-test-driven-development/">Chris Eidhof - Test Driven Development</a><br><a href="https://stackoverflow.com/questions/4114083/ios-tests-specs-tdd-bdd-and-integration-acceptance-testing">StackOverflow</a><br><br>### Videos<br><br><a href="https://talk.objc.io/episodes/S01E53-test-driven-reactive-programming">Chris Eidhof and Lisa Luo - Test Driven Reactive Programming</a><br><br><a href="https://talk.objc.io/episodes/S01E51-playground-driven-development">Chris and Brandon Williams - Playground Driven Development</a><br><br>.pct 94</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/None%20of%20This%20is%20Written%20in%20Stone</guid><title>None of This is Written in Stone</title><description>The Ephemeral Nature of Programming for a Mobile Device</description><link>https://github.com/mozahler/mozahler.github.io/posts/None%20of%20This%20is%20Written%20in%20Stone</link><pubDate>Sun, 9 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<p>On a recent trip to Manhattan, I had lunch with an old friend of mine. He is a professional music critic, writer and teacher. One thing he said to me that has unexpectedly rattled inside my head ever since is this candid confession from him (I'm paraphrasing)</p><h4>I've learned that my reviews are snapshots of something ephemeral, they reflect my immediate impressions of a concert and I don't try to make them more than that. If I'm on deadline and have to write a review at 11:00 pm after a 3 hour concert, I can only write about what I'm feeling in the moment. If I were to hear the same piece the next afternoon I might walk away with a different impression of what I just heard.</h4><p>Much of what I've written in this blog is ephemeral. The technology that programming is based on is rapidly evolving and becoming ever more powerful - if also bringing additional complexity to the overall picture. If something doesn't work for you, then try something else. Maybe you'll find a new API that makes it easier to accomplish something that used to require jumping through too many hoops. Perhaps you already have an implementation in Kotlin - or you just found one that's pretty close to what you need. Is there a tool to transform the code without rewriting the whole thing from scratch? You won't know unless you look.</p><h3>There's Got to be a Better Way</h3><p>When it comes to programming, there's always more than one way to do something. Does it need to be adaptable (typically it does), does it rely on the target device having the latest camera technology to work properly? Who are we writing it for? Does it have to support clients who don't immediately upgrade to the latest release, or who only buy a new device every 3-5 years? There are always so many variables when developing and it's easy to forget all the constraints we are juggling.</p><p>Phones and Tablets are getting ever more powerful, and the software that runs them is constantly becoming more complex. The only thing you can count on is that things change.</p><p>.pct 96</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/Customizing%20Your%20Content</guid><title>Customizing Your Content</title><description>Building On What We've Learned About the Site's Layout</description><link>https://github.com/mozahler/mozahler.github.io/publish/Customizing%20Your%20Content</link><pubDate>Wed, 5 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<p>I've already discussed <strong>The Three Main Datatypes</strong> and how the <strong>Theme</strong> object provides processing hooks that are called during the build/run process.</p><p>Part of the appeal (to me) of the <strong>Website</strong> object is that by maintaining this implicit structure you can get the compiler to check your work and make sure that your work is consistent and complete.</p><p>It's greate to have some assurance that the pieces you are using are the correct ones (that they fit together, at least), and that all the components you've designated as required have been properly defined.</p><p>If you know that a post is always going to be associated with a date (many develop sites that aren't data-centric - so this is not a given), then you will want date to be a property that you can count on being available. Why not make <strong>date</strong> a property of your <strong>ItemMetadata</strong> object?</p><h3>Metadata</h3><p>possible examples of ItemMetadata use, and the purpose of requiring it up front.</p><h3>Sometimes the Tail Wags the Dog</h3><p>The rippling effect of changes made after the initial setup/the wisdom of organizing your project before making changes to the existing (working) initial setup. Do I want to bubble the changes up or push them down?</p><p>Before beginning to build up your site it makes sense to decide the layout. In the most general, broadest sense, we know we have a bunch of files and may need to present some of them in more than one way. Some websites emphasize a reverse-chronological approach (newest item at the top). So a date property is going to be important. Similarly, the name of the article could be the file name. Except maybe you don't want to rename your files if you find your focus within the file changing while setting up.</p><p>One of the conventions built into the Website definition and well-supported by the provided tools, is the "Front End YAML" code placed at the top of each file. (YAML - Yet Another Markup Language)</p><p>take a look at this:</p><pre><code>---
date: <span class="number">2018</span>-<span class="number">11</span>-<span class="number">06</span>
title: <span class="type">Midterms</span>
tags: midterms2018
excerpt: <span class="type">This</span> <span class="keyword">is</span> typically the opening paragraph of an article.
---
</code></pre><h3>DRY</h3><p>The developer who used this set of properties populated his index file with "cells" (or rows) that incorporated these excerpts right along with the title, date and tag. I'm not a particular fan of this approach because it means if I update the article, perhaps changing its focus in the process, the summary may get out of sync. Think of how some stale comments can remain after you've changed the code base - to fix a bug, for example. Not to mention that I'm copying and pasting something that I've already written.</p><p>Let's assume that the <strong>excerpt</strong> property is meant to summarize the content of the page without repeating the title. I have a few choices here: I can write an introductory paragraph that is presented with the full page, or I can write a chunk of text that only appears in the <strong>.excerpt</strong> property of this metadata. Maybe neither of those approaches makes sense to you.</p><p>Perhaps you have adopted a specific way to format your page - maybe you introduce each page with a summary paragraph using two hastags. You can have the opening paragraph display on the index page (the blog item) as well as serve as the opening paragraph of the page once it has been tapped. You would accomplish this by using a <strong>PublishingStep</strong>.</p><p>You're free to configure things your way.</p><h2>Customizing the Site</h2><p>I want to start off with a simple example.<br>Using plugins is one way to customize your site.<br><br>Here's what my build log looks like in Xcode when I run my package after a build</p><pre><code><span class="type">Publishing Wednesday</span> (<span class="number">7</span> steps)
[<span class="number">1</span>/<span class="number">7</span>] <span class="type">Install</span> plugin '<span class="type">Splash</span>'
[<span class="number">2</span>/<span class="number">7</span>] <span class="type">Copy</span> '<span class="type">Resources</span>' files
[<span class="number">3</span>/<span class="number">7</span>] <span class="type">Add Markdown</span> files from '<span class="type">Content</span>' folder
[<span class="number">4</span>/<span class="number">7</span>] <span class="type">Sort</span> items
[<span class="number">5</span>/<span class="number">7</span>] <span class="type">Generate HTML</span>
[<span class="number">6</span>/<span class="number">7</span>] <span class="type">Generate RSS</span> feed
[<span class="number">7</span>/<span class="number">7</span>] <span class="type">Generate</span> site map
✅ <span class="type">Successfully</span> published <span class="type">Wednesday
Program</span> ended with exit code: <span class="number">0</span>
</code></pre><p>All of this happens due to this small bit of code:</p><pre><code><span class="keyword">do</span> {
    <span class="keyword">try</span> <span class="type">Wednesday</span>().<span class="call">publish</span>(
        withTheme: .<span class="dotAccess">original</span>,
        plugins: [.<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>)]
    )
} <span class="keyword">catch</span> {
    <span class="call">print</span>(error)
    <span class="call">print</span>(error.<span class="property">localizedDescription</span>)
}
</code></pre><p>or if you prefer to see it on just one line:</p><pre><code>     <span class="keyword">try</span> <span class="type">Wednesday</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">original</span>, plugins: [.<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>)]
</code></pre><p>Not only does this handle all my markdown files as well as .pngs and .gifs, but it even colorizes my embedded swift code, thanks to the use of the plugin. I didn't just add the reference to the plugin here and deploy my site. There's a little bit more to it than that. But installing a plugin <strong>is</strong> surprisingly straightforward - it's a simple edit to the Package.swift file. I will cover it in a separate blog post.</p><p>Customization encompasses a lot of possibilities. In the previous blog entry I mentioned <strong>PublishingStep</strong>s as a way to process your content. Customization is not only about content, but also appearance. What color schemes and fonts am I going to use? How do I make these changes happen? How do I want to present my story to the world? Customization also means automating pieces of the process to make it easier to add to your site as time goes on.</p><h2>Links</h2><p>.pct 90</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/Structuring%20Your%20Site</guid><title>Structuring Your Site</title><description>Let's Discuss the **Default Website** Before You Customize Your Site</description><link>https://github.com/mozahler/mozahler.github.io/publish/Structuring%20Your%20Site</link><pubDate>Wed, 5 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Publish Overview</h2><p>By following the instructions on <a href="https://github.com/JohnSundell/Publish">John Sundell's GitHub page</a>, you can set up a Website on your mac complete with a server to view the results in Safari. I <strong>kid you not</strong> when I say you can have a functional site set up on your mac in less than an hour. How is that even possible?</p><p>John has spent lot of time and effort creating the tools needed and organizing how everything fits together. Before hacking away at things, let's take a look at how things are set up out of the box, and some of the underlying reasons why things are organized the way they are. Once you have a basic understanding of how things work, you'll have an easier time making changes to customize how the site works for you.</p><p>This page outlines some of the conventions to follow while getting your feet wet. As I say often on this site: there's more than one way to do things. But until you can introduce changes to your site and view the results right away, you might feel a bit lost. I recommend you follow the conventions until you are more familiar with how everything fits together.</p><p>Remember that the type of object we create is a <strong>Website</strong>. By creating a custom <strong>Website</strong> object you are going to be met with a lot of decision making along the way. If you are going to use any of the extra tools (like Plot or Splash) that are developed for working with <strong>Publish</strong>, then it makes sense not to stray too far from the intended structure. At least, until you understand how the pieces fit together/What makes things tick.</p><h2>The Folder Layout</h2><h3>The <strong>Content</strong> Folder</h3><p><strong>Content</strong> is where you put your website's written content -- blog posts, and other pages.<br><br><strong>Publish</strong><br><br>Publish lets you generate your website's content in two ways: by using markdown files or programmatically. When you add markdown files to <strong>Content</strong>, <strong>Publish</strong> parses the content automatically. It (automatically) uses Ink markdown parser library, also created by John Sundell. All of this is fairly transparent to you. I mostly add markdown files that are ready for display, and tend to not do this programmatically. If there's any demand I can come up with a demo file or two using <strong>Plot</strong>. Plot is John Sundell's plugin that enables you to "program" your output files with methods such as li() for list items and a() to define links. The advantage to doing things this way is you have the compiler checking your work as you go along.<br><br><strong>Output</strong><br><br><strong>Output</strong> is the main folder of the website. It contains all the files necessary to display the content of the website. It's generated every time you build the project in Xcode. Once you start adding more content and custom pages to your website, you'll see more files and folders appear. You should assume everything in this file is read-only. After any changes to your source files or resources, a rebuild or running your project will trigger an update of the content of this folder.<br><br>Even though you don't add to or edit anything in this folder, it contains all the content and information to generate your website. Consider it as read-only. You'll see feed and sitemap files there along with styles.css. This CSS file is the pre-defined styling for your website. You can create your own theme, which in turn can use a custom <strong>styles.css</strong> file to display your content with a uniform feel and look.<br><br><strong>Resources</strong><br><br><strong>Resources</strong> is where you add any media files for your content, like images, videos, audio, and fonts.<br><br><strong>Sources</strong><br><br><strong>Sources</strong> has all the Swift files to build your website. On initial install there's one main.swift file which contains configuration information for your website. You can add sections, specific item metadata, website properties, and configure publishing steps. Typically you issue the command to "publish" your site at the bottom of this file.</p><h2>The Three Major DataTypes Used By the System</h2><h3>Section, Item, and Page</h3><h4>Sections</h4><p>There are three major data types used to help you structure your content.</p><p>Each of these is called at the appropriate time whenever you build/publish/run your site.<br><br>Each Section, Item, and Page can define its own set of Content — which can range from text (like titles and descriptions), to HTML, audio, video and various kinds of metadata.<br><br>The <strong>Theme</strong> struct (defined as part of the Publish <strong>API</strong>) provides you with processing hooks to let you customize how each is processed.</p><pre><code><span class="keyword">public struct</span> Theme&lt;Site: <span class="type">Website</span>&gt; {
    <span class="keyword">internal let</span> makeIndexHTML: (<span class="type">Index</span>, <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
    <span class="keyword">internal let</span> makeSectionHTML: (<span class="type">Section</span>&lt;<span class="type">Site</span>&gt;, <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
    <span class="keyword">internal let</span> makeItemHTML: (<span class="type">Item</span>&lt;<span class="type">Site</span>&gt;, <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
    <span class="keyword">internal let</span> makePageHTML: (<span class="type">Page</span>, <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>
    <span class="keyword">internal let</span> makeTagListHTML: (<span class="type">TagListPage</span>, <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>?
    <span class="keyword">internal let</span> makeTagDetailsHTML: (<span class="type">TagDetailsPage</span>, <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>?
    <span class="keyword">internal let</span> resourcePaths: <span class="type">Set</span>&lt;<span class="type">Path</span>&gt;
    <span class="keyword">internal let</span> creationPath: <span class="type">Path</span>
    ...
    }
</code></pre><p>Each Section, Item, and Page can define its own set of Content — which can range from text (like titles and descriptions), to HTML, audio, video and various kinds of metadata.</p><p><strong>Sections</strong> are created based on the members of each website’s SectionID enum. Each section both has its own HTML page, and can also act as a container for a list of Items.</p><p><strong>Items</strong> represent the individual entries (blog posts, for example) and can exist as nested HTML pages within a section.</p><p><strong>Pages</strong> provide yet another way to build custom pages. You can create free-form pages that can be placed into any kind of folder hierarchy.</p><p>For the most part, this is the typical structure used by most developers but I've noticed not everyone follows this layout. I recommend you start by adopting this three folder concept - at least until you are comfortable you understand where everything is and why it's there.</p><h2>Metadata</h2><p><strong>Publish</strong> makes use of the ItemMetadata type if you choose to give it properties. You can add metadata to the top of your files which, if defined, must match the fields in your <strong>ItemMetadata</strong> object. A missing field, or a field in the wrong format will stop the compile.</p><h2>Tags</h2><p>Tags can make for a convenient way to filter, sort or group your content. It is easy to add functionality to your site by processing content by tag (you can add your own PublishingStep to the build process). An item can have more than one tag.</p><h2>Publishing Steps</h2><p>You can think of a publishing step as a component of a composable sequence used to create your site. Each publishing step is passed an instance of <strong>PublishingContext</strong>, which it can use to mutate the current context in which the website is being published — including its files, folders, and content. This gives you a lot of freedom to enhance the site to better suit your specific needs.</p><h2>The main file</h2><p>As I mentioned, <strong>main</strong> is pretty much the only source code file you will find after an initial install. That should signal to you that important stuff goes here. Most tutorials I've seen recommend copying the <strong>Foundation</strong> theme which ships with Publish. This quickly becomes the most important file, as it can be used as the control center for customizing the site to your needs.<br><br><br><a href="https://www.russellgordon.ca/tutorials/creating-a-custom-theme-using-publish/">Creating a Custom Theme - Russell Gordon</a><br><br><a href="https://danijelavrzan.com/posts/2022/06/publish-creating-content-with-markdown/">Creating Content With Markdown</a><br><br><a href="https://deirdre.dev/wrestling-with-publish/">Wrestling With Publish</a><br><br>.pct 94</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/Adding%20a%20Resource%20File%20to%20Your%20Package</guid><title>Adding a Resource File to Your Package</title><description>An Explanation of How the **Swift Package Manager** Handles Media and Other Non-Swift files</description><link>https://github.com/mozahler/mozahler.github.io/posts/Adding%20a%20Resource%20File%20to%20Your%20Package</link><pubDate>Tue, 4 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h3>It's really hard to ask a question when you don't know what the problem is.</h3><p>Maybe you think you can just copy and paste a text file into your local package and everything will work like magic?</p><p>Well, a considerable amount of magic does occur behind the scenes when you load a file from resources. Let's' take a peek behind the curtain just long enough to see how we can get the file to load...</p><p>I call it magic because when you build your project there's a lot of work that has to be done that's implicit due to references from your source code and the structure of the project itself. This is a little abstract sounding, so let me give you a concrete example.</p><h3>Read the Contents of a Text File</h3><p>I had a text file I wanted to load for my app, and I didn't want it in my main bundle. I have a dedicated package that needs to use the file, so it's a natural fit for that file to belong to that package.</p><p>Text (and image, audio and other) files that aren't Swift (.swift) files are considered "resources" by the system. So you're not just adding a file, you're adding a (file) resource.</p><p>If this is the first resource you're adding to your project you have a little homework to do.</p><p>Let's look at how to load a file:</p><pre><code><span class="keyword">guard let</span> path = <span class="type">Bundle</span>.<span class="property">module</span>.<span class="call">path</span>(forResource: <span class="string">"sfsymbols"</span>, ofType: <span class="string">"txt"</span>),
	<span class="keyword">let</span> content = <span class="keyword">try</span>? <span class="type">String</span>(contentsOfFile: path)
        <span class="keyword">else</span> {
            <span class="keyword">return</span> []
        }
</code></pre><p>The above code tells the system where to find your file. Well, if all you've done is copied the file to somewhere in your package, then you haven't provided enough information for the system to find it. Let's start with this cryptic message that appears:</p><p>'module' is inaccessible due to 'internal' protection level</p><p>Now the message is telling you exactly what the problem is, so it's not really all tht cryptic is it? OK, let's do a search on the message.</p><p><a href="https://www.google.com/search?client=safari&rls=en&q=%27module%27+is+inaccessible+due+to+%27internal%27+protection+level&ie=UTF-8&oe=UTF-8">Try This!</a> I promise it's not a <strong>RickRoll</strong></p><p>I'm not saying you won't find the answer in these results, but you have to admit it's not going to be an easy search. If you haven't set up your new addition to the package as a resource, then the code above is just not going to work.</p><p>If you do a search on <code>adding a resource to a local swift package</code> you might find your answer.</p><p>Which is what I did. And of course I had to do one of these: 🤦🏽‍♂️. I do a lot of face-palms when I'm developing. It's the nature of the beast.</p><p>So you want to create a folder called <strong>Resources</strong> in your package underneath the <strong>Sources</strong> folder. In my case the folder directly under Sources was named for the package itself, and I put the <strong>Resources</strong> folder inside that folder.</p><p>We're already halfway there!!</p><h3>Configuring the Package.swift file for a resource</h3><p>Now you have a resource in your package, and it's time to configure the package to recognize your file as a valid resource so that it can be bundled up into the package module the next time you perform a build.</p><p>This is pretty straightforward. Adding a resource is like adding a dependency, except there's only one place you have to specify the resources (there are source dependencies and target dependencies, but here we are just talking about specifying the target resource)</p><p>Here's the code you need to add the one file:</p><pre><code>		resources: [
		.<span class="call">process</span>(<span class="string">"Resources/sfsymbols.txt"</span>)
	]
</code></pre><p>Add these lines just inside the closing paren on your target, just after the dependencies:</p><pre><code>     targets: [
        .<span class="call">target</span>(
      		...
      		dependencies: [
              ...
      		],
          resources: [  
            ...
          ]
        )
</code></pre><p>Go ahead and build your project!</p><p>Ooops. It didn't work did it?</p><p>Go ahead and build it again.</p><p>Profit! I told you there was a certain amount of magic involved.</p><p>Why did ou need to build it twice? Maybe the multitasking compiler started with a list of unresolved references, saw it didn't have a valid module, finished what it could and errored out. The next time you built it, it found the module (local package) ready to go, and the compile was allowed to complete successfully. Who knows? Maybe it will work differently in the next version of Xcode.</p><p>It's nice to see my project compiling once again!</p><h2>Links</h2><p><a href="https://github.com/xnth97/SymbolPicker">SymbolPicker - GitHub</a><br><br>.pct 96</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/swift/The%20AppStorage%20Property%20Wrapper</guid><title>The AppStorage Property Wrapper</title><description>A convenient way to save and read variables from UserDefaults and use them in the same way as \@State properties.</description><link>https://github.com/mozahler/mozahler.github.io/swift/The%20AppStorage%20Property%20Wrapper</link><pubDate>Mon, 3 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h3>@AppStorage</h3><p><code>@AppStorage</code> is a convenient way to save and read variables from UserDefaults and use them in the same way as <code>@State</code> properties. It can be seen as a <code>@State</code> property which is automatically saved to (and read from) UserDefaults.<br><br>User defaults is actually a property list file (plist) which is made accessible programmatically. It can store values of basic datatypes. Since it’s a property list file, stored content is in key-value pairs. The purpose of user defaults is to let us save pieces of data and read them back whenever that’s necessary, quickly and effortlessly. This data is available app-wide and can be updated from anywhere inside an app. User defaults is not meant to be acting as a persistent storage of large data. On the contrary, it’s best for keeping stuff like user preferences or settings. Also, it’s the worst choice a developer can make in order to save sensitive data. User defaults provide no security at all, and it’s easily accessible; so, just don’t do that.<br><br>In programming terms now, we all know from the pre-SwiftUI days that we can access user defaults using the UserDefaults class in the Foundation framework. This is still valid nowadays as well. However, with the advent of the SwiftUI framework, there is a new player around -- the @AppStorage property wrapper.<br><br>@AppStorage is one of the various property wrappers available to use in SwiftUI. We can consider it as an app-wide source of truth, which, however, has one great difference comparing to others -- modified values do not remain in memory, but they get written to the user defaults file. Using it for reading and writing values is straightforward.</p><p>With the <code>@AppStorage</code> property wrapper, writing to user defaults file is just as easy as reading values from it. What actually differs is how we use these properties. When we pass their binding values as arguments to various SwiftUI views and they get updated, those changes will be written in turn to the user defaults file.<br><br><a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html">Apple OnLine Swift Documentation/Attributes</a><br><br><a href="https://stackoverflow.com/questions/65587932/store-custom-data-type-in-appstorage-with-optional-initializer">Stackoverflow</a><br><br><a href="https://stackoverflow.com/questions/66308518/swiftui-best-practice-for-using-appstorage-for-settings-how-to-read-the-userde">Stackoverflow</a></p><p><a href="https://serialcoder.dev/text-tutorials/swiftui/using-the-appstorage-property-wrapper-in-swiftui/">Using</a><br><br><a href="https://stackoverflow.com/questions/65515378/why-is-my-appstorage-not-working-on-swiftui">Stackoverflow</a><br><br>.pct 94</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/swift/BindingsAndPropertyWrappers</guid><title>BindingsAndPropertyWrappers</title><description>A Little Bit of SwiftUI</description><link>https://github.com/mozahler/mozahler.github.io/swift/BindingsAndPropertyWrappers</link><pubDate>Sun, 2 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>A Little Bit of SwiftUI</h2><p>One of Swift’s strengths is its type safety. Its strong typing system and error handling prevents runtime code crashes and other errors in production. By giving the compiler such a central role in enforcing consistency up front, Swift has a shorter feedback loop. This means that many errors in the code are caught up front, giving you the opportunity to fix them before you even try to run the code, greatly reducing the time and effort needed for bug fixing and reducing the risks of deploying low quality code.<br><br>I could spend pages describing why I think <strong>SwiftUI</strong> is where your time is best spent. But I can say that having already worked my way through Objective-C and the whole evolution of UIKit. Those technologies are essential and they are not going away. Most likely you will have to know how to interact with code linked to these frameworks at some point. I will have more to say about both <strong>Objective-C</strong> and <strong>UIKit</strong> later. But for now I think it's best to introduce some of the basic concepts that contribute to the ease of use of <strong>SwiftUI</strong>.<br><br>## Imperative vs declarative Programming<br><br>Back in the day there were a lot of articles written about the <strong>Massive ViewController</strong> when programming to the UIKit framework - and with good reason. The adaptation of MVC used in the iOS world was not universally admired (nor was it considered MVC by many, but that’s another kettle of fish.) And we’re about to face similar controversies as people try to write complex apps using SwiftUI.<br><br>## Binding and Property Wrappers<br><br>I provide here a brief summary of Binding and its relationship to Property Wrappers. It may seem strange to you that I spend so much time on these two topics, and then rarely mention them in the other chapters. But it's important to understand these concepts - they are fundamental to how SwiftUI works. A more complete discussion of property wrappers requires a discussion of the <strong>Combine</strong> framework. I will leave that for another day.<br><br>When using TCA, we are (mostly) going to forego the usual use of <strong>@State</strong> variables. Instead of having the View manage the variable, we are going to move it into our <strong>GameState</strong> object. By doing this we make it much easier to inject values into the app, making it more easily testable. Plus the variable can be shared with other views that use the same Store.<br><br>## What is a Binding<br><br>A binding in SwiftUI is a connection between a value and a view that displays and changes it (typically by using a <strong>control</strong> such as a Picker or Slider). You can create your own bindings with the <strong>@Binding</strong> property wrapper, and pass bindings into views that require them. Or you can use a property wrapper, like <strong>@State</strong>, which exposes a binding to its wrapped value. In the case of a <strong>control</strong>, the connection is two-way, so the UI element can change the value, and the value can change the UI element. Bindings make it easier to write declarative code, since the enable your code to respond to changes in the bound variables.<br><br>You access the binding using the <strong>$</strong> prefix. This is called the <strong>projected value</strong>. Use the projected value to pass a binding value down a view hierarchy. When you pass a variable in a function call using the <strong>$</strong> prefix you are sending the binding, and can update the variable in the called routine. The caller will see these changes and can respond to them.<br><br>You access the wrapped value using the <strong>_</strong> (underscore) prefix. Typically you would access this in the initializer of the child view when setting up a binding (example below)<br><br>Bindings and Property Wrappers is a big topic, and this dicussion is not exactly a deep dive. I will provide many links below for you to explore this topic on your own. Please open an issue if you'd like to see a more in-depth look at these two topics.<br><br><br>## Property Wrappers<br><br>When I first looked up property wrappers, this is what I found<br><br>Property wrappers allow you to extract common logic in a distinct wrapper object<br><br>I hate circular definitions. This doesn't explain anything to me.<br><br>A property wrapper can be seen as an extra layer that defines how a property is stored or computed on reading. It’s especially useful for replacing repetitive code found in getters and setters of properties.<br><br>At least this tells me why I might want to consider using one.<br><br>A property wrapper is a generic structure that encapsulates read and write access to the property and adds additional behavior to it. We use it if we need to constrain the available property values, add extra logic to the read/write access (like using databases or user defaults), or add some additional methods.<br><br>This is maybe a bit more than we need right now. I will defer discussion of the role of generics for a different day.<br><br>Although it would be convenient to think that everything that starts with an <strong>@</strong> is a property, this just isn’t the case. Keywords starting with an @ are instructions to the compiler, and signaling a property wrapper is just one of its uses.<br><br>I'm going to close out this discussion with a brief summary of some very common SwiftUI property wrappers.<br><br>## <strong>@State</strong><br><br>State is the simplest source of truth your app can have. It is designed to contain simple value types, such as Ints, Strings, and Bools. It is not designed for more complex, reference types, such as any classes or structs you define yourself and use within your app.<br><br>Whenever a <strong>@State</strong> variable is updated, the view itself is refreshed/recreated to reflect the new value.<br><br>#### @State<br><br><strong>@State</strong> - this wrapper declares local value property. Apple recommends that you mark <strong>@State</strong> variables private, because the view manages its lifetime locally.<br><br><a href="https://stackoverflow.com/questions/61361788/state-vs-observableobject-which-and-when">David Pasztor</a> If you mark any variables as @State in a SwiftUI View and bind them to a property inside the body of that View, the body will be recalculated whenever the @State variable changes and hence your whole View will be redrawn. Also, @State variables should serve as the single source of truth for a View. For these reasons, @State variables should only be accessed and updated from within the body of a View and hence should be declared private.<br><br>### <strong>@StateObject</strong><br><br>A <strong>@StateObject</strong> is also designed to be the owner of the data. You initialize it right there and thus you know exactly where it comes from.<br><br>## <strong>@StateObject</strong><br><br>A property wrapper type that instantiates an observable object (which is a type of object with a publisher that emits before the object has changed)<br><br>SwiftUI’s @StateObject property wrapper is a specialized form of @ObservedObject, having all the same functionality with one important addition: it should be used to create observed objects, rather than just store one that was passed in externally.<br><br>When you add a property to a view using @StateObject, SwiftUI considers that view to be the owner of the observable object. All other views where you pass that object should use @ObservedObject.<br><br>By using @StateObject, we are letting our view know that whenever any of the @Published properties within the Observable Object change, we want the view to re-render - we are now listening for changes to any of its marked @Published properties.<br><br>A thorough explanation of <strong>@Published</strong> would neccesitate covering the <strong>Combine</strong> framework. This needs to be left for another day - please open an issue if you'd rather see it appear sooner than later.<br><br>SwiftUI’s @StateObject property wrapper is designed to fill a very specific gap in state management: when you need to create a reference type inside one of your views and make sure it stays alive for use in that view and others you share it with.<br><br>You should use @StateObject only once per object, which should be in whichever view is responsible for creating the object. All other views that share your object should use @ObservedObject.<br><br><br>### When to use either of these two<br><br>You should use @State when you are binding some user input (such as the value of a TextField or the chosen value from a Picker). @State should be used for value types (structs and enums).<br><br>On the other hand, @ObservedObject should be used for reference types (classes), since they trigger refreshing a view whenever any @Published property of the ObservableObject changes.<br><br>You should use @ObservedObject when you have some data coming in from outside your View, such as in an MVVM architecture with SwiftUI, your ViewModel should be stored as an @ObservedObject on your View.<br><br>## The <strong>ObservableObject</strong> Protocol<br><br>This protocol is defined in <strong>Combine</strong>, and it defines a type of object with a publisher that emits before the object has changed. This effectively means that when @Published properties in an <strong>ObservableObject</strong> change, your view is notified of the change so it can respond to the change.<br><br><strong>ObservableObjects</strong> change the @Published property when a final value is ready. Conversely any changes you make to the properties of a <strong>View</strong> struct are immediately reflected, causing the view to be rendered anew immediately. This is part of the "push-pull" dichotomy of struct vs. class (value vs. reference types)<br><br><br>## <strong>@ObservedObject</strong><br><br>A property wrapper type that subscribes to an observable object and invalidates a view whenever the <strong>ObservableObject</strong> changes. In contrast to the earlier wrappers, <strong>@ObservedObject</strong> is used to keep track of an object that has already been created.<br><br>I have left out many useful property wrappers in this discussion, but I have covered enough of the groundwork for you to start to make your own connections when you see a property wrapper defined or used. And you will see them frequently.<br><br><br>## Links <a href="05-APropertyWrapperFromPointFree-BindableState">Next</a><br><a href="https://www.hackingwithswift.com/quick-start/swiftui/all-swiftui-property-wrappers-explained-and-compared">HackingWithSwift - Property Wrappers</a><br><a href="https://github.com/DougGregor/swift-evolution/blob/property-wrappers/proposals/0258-property-wrappers.md">DougGregor on GitHub</a></p><p><a href="https://stackoverflow.com/questions/24035648/swift-and-mutating-struct">So</a> <a href="https://purple.telstra.com/blog/swiftui---state-vs--stateobject-vs--observedobject-vs--environme">Sam Wright</a><br><a href="https://www.hackingwithswift.com/quick-start/swiftui/what-is-the-stateobject-property-wrapper">Hacking</a><br><a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html">Apple OnLine Swift Documentation - Attributes</a><br><a href="https://en.proft.me/2021/05/22/data-flow-swiftui-state-binding-observedobject/">DataFlow - Morgun Ivan</a><br><a href="https://developer.apple.com/videos/play/wwdc2019/226/">WWDC2019 - DataFlow and Swift</a><br><a href="https://developer.apple.com/wwdc20/10040">WWDC2020 - Data Essentials in SwiftUI</a><br><a href="https://www.swiftbysundell.com/articles/bindable-swiftui-list-elements/">Sundell - Bindable SwiftUI List Elements</a><br><a href="https://www.appypie.com/binding-swiftui-how-to">Binding</a></p><p>.pct 86</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/DreamingOfALoaf</guid><title>DreamingOfALoaf</title><description>A Recursive Tale</description><link>https://github.com/mozahler/mozahler.github.io/posts/DreamingOfALoaf</link><pubDate>Sat, 1 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<p>I was wandering through the stacks at the library one day, and I picked up a slim volume called <a href="https://mitpress.mit.edu/books/little-lisper-trade-edition">The Little LISPer</a>.</p><p>Practically a pamphlet, it was a wonderful introductory text on the LISP programming language. The format was in the form of a question, followed by its answer. As I read it, it soon became obvious that you were being spoon-fed the information you needed to answer the next question - but only if you were paying attention. I loved it!</p><p>Somewhere within its pages there was this great little tale about recursion. I read it very many years ago, and so this is definitely a paraphrase.</p><p>One day <code>Peter the Ponderer</code> was sitting down to his evening snack of a nice slice of fresh bread, slathered with some home-made preserves. Today it was a cranberry-orange marmalade in fact. One of his favorites. The bread was fresh, so it wasn’t going to be a toast and jam day. (Not that there’s anything wrong with toast and jam!)</p><p>He cut himself a generous slice and began slathering on a thick layer of the marmalade. While he was spreading the spread, he got to thinking: “I wonder how many slices are in this loaf?” He pondered a bit, and as the events of the day caught up to him, he found himself drifting off to sleep.</p><p>In his dream it was about the time of sunset, and this is when he loved to partake of his favorite daily ritual: fresh bread and jam. He went into the kitchen where he found his recently baked loaf. He had just picked it up at the baker’s the previous day, and it had but one slice gone. Slicing off a piece of the loaf he wondered… “How many slices are in this loaf?” He thought about this for a bit and wasn’t quite sure how he was going to solve this problem.</p><p>He was rapidly growing sleepy and didn’t really give it a whole lot of thought before being engulfed by slumber. As he started to dream, he found himself walking into the kitchen about to partake of his favorite daily ritual: fresh bread and jam. The bread wasn’t freshly baked, but that was actually a good thing: it meant he would be having a nice slice of toast that night coupled with any of his many choices of spreads. Maybe it would be honey tonight? Boysenberry? Raspberry Rhubarb? He chopped off a slice, went for the honey with pimento, and blissfully munched on his yummy toast while sipping on his favorite <code>SleepyTime</code> tea. Before drifting off, he wondered to himself… “I wonder how many slices of bread make up this loaf.” And before you know it, he was sound asleep.</p><p>I’m sure you’re picking up on this pattern… as the loaf shrinks in size we are a dream within a dream within a dream. Finally Peter enters the kitchen and finds there is only one slice left of his beloved loaf of bread. He dutifully smears his topping of the day on his generous slice, and swallows the tasty snack down. As he looks at the crumbs on the plate, he suddenly notices that the loaf is all gone. And — poof — he wakes from this dream realizing that he just had the last slice of bread.</p><p>But he didn’t wake all the way up, he just woke up from the dream within the dream (within the dream, and so on), to the one he just dreamt. He thought to himself… “Oh, I just had the last slice in my dream and so this slice I just ate was my second to last slice.” and — poof — he woke up from this dream to realize, "oh there are two more slices to the loaf."</p><p>And so forth, and so on, until he woke up from the very first dream and realized that there are 11 more slices of bread remaining on his freshly cut loaf.</p><p>That’s how you solve a puzzle recursively.</p><h3>The Iterative Solution</h3><p>Peter was driving himself crazy. He just had the first piece of the magnificent loaf he had purchased that day. What was driving him crazy was a silly thing, really. How many slices of bread are in this loaf? Well, Peter wasn’t going to let himself be consumed by this problem for long, so he picked up the loaf, grabbed a knife, and proceeded to slice up the bread. He lopped off a slice and thought - here's the second slice. He cut off another slice and thought, well that makes three so far...</p><p>Aha -- he realized as he was finished slicing -- There are 12 slices of bread in this loaf.</p><p>And that’s the iterative solution to the same problem.</p><h3>Which One is Better?</h3><p>The gist of the recursive approach is that you set aside a piece of the problem and then look at the problem with this smaller domain. Each time you assess the problem it is smaller in scope, until it is a very simple matter.</p><p>If it takes so many words to describe the recursive way, why would you bother trying to approach a programming problem recursively? The answer is in the previous paragraph: you break off a portion of the whole over and over again until you have reached the end and you are left with a trivial case that is easily resolved. Often that means that the recursive solution involves less code.</p><p>Do you think I'm making that up? Check out my entry on "The Flood Fill Algorithm" and you can see for yourself!</p><h2>Links</h2><p><a href="https://mitpress.mit.edu/books/little-lisper-trade-edition">The Little LISPer</a></p><p><a href="https://github/mozahler/FloodFill/Readme">FloodFill - GitHub</a><br><br>.pct 96</p>]]></content:encoded></item></channel></rss>