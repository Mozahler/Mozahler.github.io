<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Mozahler</title><description>Getting It to the Next Level</description><link>https://github.com/mozahler/mozahler.github.io</link><language>en</language><lastBuildDate>Fri, 28 Oct 2022 12:37:57 -0400</lastBuildDate><pubDate>Fri, 28 Oct 2022 12:37:57 -0400</pubDate><ttl>250</ttl><atom:link href="https://github.com/mozahler/mozahler.github.io/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/swiftui/SPM%20and%20Package%20dot%20Swift</guid><title>SPM and Package dot Swift</title><description>SPM and the Benefits of Using Packages</description><link>https://github.com/mozahler/mozahler.github.io/swiftui/SPM%20and%20Package%20dot%20Swift</link><pubDate>Wed, 19 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Swift Package Management</h2><p>Whether you realize it or not, SPM (the Swift Package Manager) really deserves to be your best friend - your favorite tool in the toolbox. The more you understand what it does and how to configure it, the more productive you'll become.<br>It just isn't always appropriate for you to write every bit of code in your project these days. It makes no sense to reinvent the wheel, and there's a large enough body of open source code that is well-tested and available for you to use almost immediately in your projects. If you've worked with Carthage (my old favorite) or CocoaPods (when I must), then you understand the benefits of bringing someone else's code into your project. And you understand there's a learning curve involved in learning how to configure and maintain these additions. SPM has been created with an enormous amount of input from the coding community, and builds on the successes of these and other third-party code managers. Xcode plays well with SPM.</p><p>The best thing about using SPM is that you are typically working with the actual source code (I'm not going to get into binary packages here - but they are sometimes an option as well.) If something doesn't work exactly as you need it, you can make a local copy of the package and update the code yourself. Add some tests and you might even be able to make a PR for someone at GitHub. But let's not get ahead of ourselves.</p><h3>A Great Way to Silo Your Code</h3><p>Almost all code I write these days is created within packages. My Xcode project directory typically has an AppNameApp.swift and a ContentView.swift file plus the usual resources/assets, etc. I create a workspace, drag my new project into it, and then drag the (local) component packages into the project (at the top left) as needed. If it’s a new project, then I typically have a new package as well, and I import it in my ContentView file where I call the landing view of my app. It’s a little bit of upfront maintenance that pays off almost right away. Once you have performed a full compile of your project, then only the package you are currently updating needs to be recompiled when it’s time to try out your changes. Compiles are quicker and you can see the latest results right away.</p><h3>Modules</h3><p>Swift organizes code into <code>modules</code>. Each module specifies a namespace and enforces access controls on which parts of that code can be used outside of the module. A program may have all of its code in a single module, or it may import other modules as dependencies. This vertical siloing of your app's functionality helps to reduce tight coupling of your code and can lead to a more composable architecture where you swap modules in and out as needed. This allows you to share functionality across multiple apps that don't know anything about each other.</p><p>When you use a separate module for code that solves a particular problem, that code can be reused in other situations. For example, a module that provides functionality for making network requests can be shared between a photo sharing app and a weather app. Once again, using modules lets you build on top of other developers’ code (or your own) rather than reimplementing the same functionality yourself. (DRY - Don't Repeat Yourself)</p><h3>Packages</h3><p>A package consists of Swift source files and a manifest file. The manifest file, called <code>Package.swift</code>, defines the package’s name and its contents using the PackageDescription module. It can have one or more targets. Each target specifies a(typically executable) product and may declare one or more dependencies.</p><h2>Benefits of Using Packages</h2><ul><li>You can share code between projects or between targets within a project.</li><li>Each target in the package is compiled as a module.<ul></ul></li></ul><p>&gt;Xcode will automatically create a resource bundle and an internal static extension on Bundle if your target includes resources.</p><p>This means you can add gifs, pngs, audio and video files to the bundle, rather than the main bundle of the app itself. You decide what structure you want for your app, but this provides another option for siloing your data. &gt;Xcode recognizes the most common types of resources and will automatically configure the package for them. This includes <code>Core Data</code> and asset catalogs.</p><p>&gt;<code>.json</code>, <code>.txt</code>, <code>.md</code> files are considered custom resources (there are others as well) and must be added to the Package.swift manifest in order for them to be included in the target. You can include items on the individual file level, or entire folders can be specified at once.</p><h2>Keeping things Organized</h2><p>You may have strong opinions on how you organize your projects. Workspaces are definitely old-school (yet still have their place), and <code>Packages</code> provide many of the same features/benefits. But keep in mind that they <strong>can</strong> co-exist. You can decide whether they should. I like to keep everything in a workspace, since it cuts down on duplication. (there's lots more to say about how it does that - derived data, sharing binaries between included packages, etc.)</p><p>This is what <code>Apple</code> has to say about using workspaces:</p><p>&gt;Because indexing is done across the whole workspace, code completion, Jump to Definition, and all other content-aware features work seamlessly through all projects in the workspace. Because refactoring operations act across all the content of the workspace, you can refactor the API in a framework project and in several application projects that use that framework all in one operation. When building, one project can make use of the products of other projects in the workspace</p><h4>Projects in a Workspace Share a Build Directory</h4><p>By default, all the Xcode projects in a workspace are built in the same directory, referred to as the workspace build directory. Each workspace has its own build directory. Because all of the files in all of the projects in a workspace are in the same build directory, all of these files are visible to each project. Therefore, if two or more projects use the same libraries, you don’t need to copy them into each project folder separately.</p><p>Xcode examines the files in the build directory to discover implicit dependencies. For example, if one project included in a workspace builds a library that is linked against by another project in the same workspace, Xcode automatically builds the library before building the other project, even if the build configuration does not make this dependency explicit. You can override such implicit dependencies with explicit build settings if necessary. For explicit dependencies, you must create project references.</p><p>Each project in a workspace continues to have its own independent identity. To work on a project without affecting—or being affected by—the other projects in the workspace, you can open the project without opening the workspace, or you can add the project to another workspace. Because a project can belong to more than one workspace, you can work on your projects in any number of combinations without having to reconfigure any of the projects or workspaces.</p><p>You can use the workspace’s default build directory or you can specify one. Note that if a project specifies a build directory, that directory is overridden by the build directory of whatever workspace the project is in at the time you build the project. Naturally, this sharing of code should also contribute to better compile times.</p><h3>Xcode Can Help</h3><p>In Xcode, create a new, empty workspace. Once created, find the directory for the package you want to work on and drag that directory into the project navigator in Xcode. Xcode will create a Swift Package and download the dependencies. Easy Peasy.</p><p>Targets specify in detail how a product/binary (i.e., an application or library) is built. They include build settings, such as compiler and linker flags, and they define which files (source code and resources) actually belong to a product. When you build/run, you always select one specific target using the <code>Scheme Manager</code> (the window at the top center of the screen when Xcode is FullScreen).</p><p>It is likely that you have a few targets that share code and resources. These different targets can be slightly different versions of an app (iPad/iPhone, different brandings,…) or test cases that naturally need to access the same source files as the app. All these related targets can be grouped in a project. While the project contains the files from all its targets, each target picks its own subset of relevant files. The same goes for build settings: You can define default project-wide settings in the project, but if one of your targets needs different settings, you can always override them there.</p><h2>Links</h2><p><a href="https://forums.swift.org/t/how-to-produce-multiple-libraries-from-one-package/18478/2">Multiple Libraries rom One Package</a><br><a href="https://www.fabrizioduroni.it/2020/10/19/swift-package-manager-resources/">Swift Package Manager Resources</a><br><a href="https://betterprogramming.pub/how-to-add-resources-in-swift-package-manager-c437d44ec593">Adding Resources to a Swift Package</a><br><a href="https://jllnmercier.medium.com/swift-package-manager-integrating-resources-37dbea669af">SPM Integrating Resources</a><br><br><a href="https://holyswift.app/introduction-to-app-modularisation-with-swift-package-manager-a-tale-to-be-told">Leonardo Maia Pugliese</a><br><br><a href="https://stackoverflow.com/questions/39499281/what-is-the-difference-between-a-swift-package-and-a-module">Package vs. Module</a><br><br><a href="https://developer.apple.com/library/archive/featuredarticles/XcodeConcepts/Concept-Workspace.html">Apple Documentation - Xcode Concepts</a><br><a href="https://augmentedcode.io/2020/07/05/separating-code-with-swift-packages-in-xcode/">Separating Code With Swift Packages</a><br><br><a href="https://forums.swift.org/t/xcode-project-with-spm-dependencies/18157/2">forums.swift.org Jeremy David Giesbrecht</a><br><br><a href="https://stackoverflow.com/questions/11618407/xcode-workspace-vs-nested-projects">StackOverflow</a><br><br><a href="https://stackoverflow.com/questions/21631313/xcode-project-vs-xcode-workspace-differences">SO II</a><br><br>[add links for Carthage, CocoaPods, Brew]</p><p>.pct 88</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/The%20Role%20of%20Plugins</guid><title>Plugins</title><description>The Care and Feeding of Plugins in Your Custom Website</description><link>https://github.com/mozahler/mozahler.github.io/publish/The%20Role%20of%20Plugins</link><pubDate>Tue, 18 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h1>Plugins</h1><h2>The Role of Plugins in the Website package</h2><p>A well-written plugin can save you a lot of work. The <code>Publish</code> environment is composable in the sense that you can add functionality with addition of packages/modules that are seamlessly integrated into the <code>Website</code> project. JohnSundell calls these add-ons to the system <code>Plugins</code>, and has provided a few of his own to ease the burden of developing your site from scratch.</p><p>On this page I will discuss a couple of plugins developed by John Sundell that integrate seamlessly with <code>Publish</code> to provide you with key functionality, as well as provide you with more customization options. If you take a look at the <code>Package.swift</code> file in his <code>Publish</code> package, you'll see that he uses many of his own plugins to set up the default <code>Website</code>.</p><p>You don't need to know this to use the <code>Publish</code> package, but if you take a look at its <code>Package.swift</code> you can see that it relies on a number of plugins (yes, John wrote all of them).<br><br><ul> 
.li("Ink")
.li("Plot")
.li("Files")
.li("CodeExtended")
.li("ShellOut")
.li("Sweep")
.li("CollectionConcurrencyKit")
</ul></p><p>I will be happy to devote a page to discussing his <code>Plot</code>, <code>Ink</code> and <code>Splash</code> plugins if there's an interest.</p><h2>Setup</h2><p>Adding a plugin to your Website is simplicity itself. But before reading this, please take a look at the blog entry under <code>publish</code> to get a sense of how <code>Package.swift</code> is structured. The following will make a lot more sense if you do that.</p><p>A plugin is considered a <code>dependency</code>, at the risk of making a circular definition, this means that you are requiring the package to depend on this new item. It is up to the Swift Package Manager to resolve the new dependency - which can include downloading from a remote site, compiling source code, copying files to their proper destination, etc.</p><p>A package dependency consists of a Git URL to the source of the package, and a requirement for the version of the package. The Swift Package Manager performs a process called dependency resolution to figure out the exact version of the package dependencies that an app or other Swift package can use.<br><br>The <code>Package.resolved</code> file records the results of the dependency resolution and lives in the top-level directory of a Swift package. If you add the Swift package as a package dependency to an app for an Apple platform, you can find the Package.resolved file inside your .xcodeproj or .xcworkspace.</p><h2>Adding the Dependency (In Two Places)</h2><p>You need to add a dependency to your package as well as to the target product. This means you will be adding code to the Package.swift file in two places. In the following example, I have added the "Splash" plugin as a source dependency.</p><pre><code>     dependencies: [
        .<span class="call">package</span>(name: <span class="string">"Publish"</span>, url: <span class="string">"https://github.com/johnsundell/publish.git"</span>, from: <span class="string">"0.8.0"</span>),
        .<span class="call">package</span>(name: <span class="string">"SplashPublishPlugin"</span>, url: <span class="string">"https://github.com/johnsundell/splashpublishplugin"</span>, from: <span class="string">"0.1.0"</span>)
        ],
</code></pre><p>The above comes near the top of the file, directly after defining the product. Defining the target dependency (the components required to compose/build the target executable) is equally straightforward, just add the name of the plugin to the existing array of dependencies:</p><pre><code>         .<span class="call">executableTarget</span>(
            name: <span class="string">"Wednesday"</span>,
            dependencies: [<span class="string">"Publish"</span>, <span class="string">"SplashPublishPlugin"</span>]
        )
    ]
</code></pre><p>You need make both additions to the file, and then you are free to use the plugin in your <code>Website</code> object. See the blog entry on "Customizing the Site" to see more presented in the proper context.</p><h2>Links</h2><p><a href="https://docs.swift.org/package-manager/PackageDescription/PackageDescription.html">SPM- Dependencies</a></p><p>.pct 90</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/The%20Publish%20Tutorial</guid><title>The Publish Tutorial</title><description>Starting From the Top - Setting Up the Initial Site</description><link>https://github.com/mozahler/mozahler.github.io/publish/The%20Publish%20Tutorial</link><pubDate>Mon, 17 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>The Publish Tutorial</h2><p>First of all, you don't need me to teach you how to set up your website. I've been doing this for a couple of days. There are many great, informative resources out there, and I've provided links to some of those I found particularly helpful. (check out Danijela's excellent overview)</p><p>&gt;Every website created with Publish is a Swift package. When deployed, a pre-defined set of steps get executed that builds and renders the HTML components and styles them with CSS.</p><p>It can be a bit confusing to work in so many languages at once: markdown, html, css, swift, not to mention the DSL's you have available to leverage stylistic and other changes across your projects. <code>Publish</code>, <code>Ink</code>, <code>Splash</code> are tools written to make the transition from markdown to html possible without you having to learn the ins and outs of web programming. Ultimately the idea is to express your intentions in Swift and to allow the publishing pipeline to transform the information into the correct html. It's a big ask. And it is doable.</p><p>In an attempt to stay <code>meta</code> I will try to explain how to get the ball rolling with your own website.</p><p>While the <code>Publish</code> package by John Sundell is an amazing accomplishment, there aren't a lot introductory tutorials that go beyond installing the standard boiler plate he provides out of the box. There are some well-written articles available for customizing pieces of your setup, and some highly recommended ones are linked below. On a separate page I have documented part of my journey towards setting up this site.</p><p>[link to the related page]</p><p>One thing you need to do while working on putting your site together is to get to know what steps are involved, and what those steps actually do. Go ahead and peek into the <code>Output</code> folder after building and running your project. Is everything where you thought it would be placed? Are you puzzled by any of the content?</p><p>To give you an example of the roadblocks beginners can run into, I struggled with displaying images. I made sure I had an images folder in the <code>Resources</code> folder</p><h3>Start Here</h3><p><a href="https://deirdre.dev/wrestling-with-publish/">Wrestling With Publish</a></p><p>This is an excellent collection of links to sites that have been customized and the GitHub repository for the site (sometimes just the latter). In my companion piece linked above I discuss what I found when I looked into these sites.</p><h3>Progressing to the Next Step</h3><p>There are many ways to improve your site once you have gotten under way. Perhaps you feel it is lacking something, but you can't quite put your finger on what it might be. You can get a feel for how others have extended the basic setup. You can take a look at their site, and if you see something that catches your eye, go to their GitHub project and figure out how it was done. If that seems a little advanced for you, then start by browsing any of the tutorials that explain how to customize a theme or add publishing steps to the pipeline.</p><h3>Exposure</h3><p>Try clicking on one of the links where someone describes a particular enhancement they made and how they accomplished it. Just surfing through a site might give you some ideas on how to spruce up your own site. [list the different things that people customize - the cover page thing, mention swapping out ink for common markdown, etc.]</p><p>https://github.com/leontedev/Publish-leonte.dev</p><h3><code>main.swift</code></h3><p>main.swift is a file which contains a configuration information for your website. In this file you can add sections, specific item metadata, website properties, and configure publishing steps. Of course you can add other files, extend other protocols or processes in ways that better serve your specific needs. In order to do this well, however, it helps if you understand the underlying structure - including how things get done.</p><h2>Plugins</h2><p>Plugins are great for extending the capabilities of your site. They can be a little difficult to work with, however. Adding a plugin to the Package.swift file isn't difficult, but there are some "gotchas" that you need to be aware of. As time goes on it becomes easier to work with the SPM in Xcode. But there are still times when the compiler gets confused and you need to clean your build folder and exit the app. Sometimes, miraculously, everything can start compiling again after performing this little dance.</p><h3>Minimum Version</h3><p>If you don't specify a miminum version of macOS in your package.swift file you may find it won't compile. The reason may seem a bit cryptic - the compiler tells you your target supports an old version of the OS, but you haven't mentioned one anywhere.</p><p>The solution isn't difficult: you need to add the <code>platforms</code> parameter to your initializer in <code>Package.swift</code>. If you're using a pre-existing <code>Package.swift</code> file you may find it needs some updating.</p><p>There's a line at the top of <code>Package.swift</code> that tells the package manager which version of swift it can support.<br><br>&gt; ###### // swift-tools-version:5.7 &gt;// The swift-tools-version declares the minimum version of Swift required to build this package.</p><p>On Apple's Developer Site, You'll find a slightly more detailed explanation:</p><p>&gt;The Swift tools version declares the version of the PackageDescription library, the minimum version of the Swift tools and Swift language compatibility version to process the manifest, and the required minimum version of the Swift tools to use the Swift package.</p><h3>Update the tools version after an Xcode Upgrade</h3><p>If this version is out of date, you may not even be able to specify the version of the OS you want. It may not have existed when that version of tools was first in use. If you are forced to provide legacy support this may not be an option for you. You may have to plan the upgrades to your tools more carefully than I.</p><h2>Links</h2><p><a href="https://deirdre.dev/wrestling-with-publish/">Wrestling With Publish</a></p><p><a href="https://danijelavrzan.com/posts/2022/06/create-portfolio-website-using-publish/">Danijela Vrzan</a></p><p>.pct 80</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/A%20Survey%20of%20Other%20Sites</guid><title>A Survey of Other Sites</title><description>How Can You Set Up Your Own Site? How Have Others Done It?</description><link>https://github.com/mozahler/mozahler.github.io/publish/A%20Survey%20of%20Other%20Sites</link><pubDate>Thu, 13 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h1>A Survey of Other Sites</h1><h4>How do I set up my own web site when I don't what my options are?</h4><p>By following the install instructions on the <code>Publish</code> website, or any of the many introductory pieces available online, I can set up a basic web site in minutes. That's pretty incredible and a testament to John Sundell's hard work at piecing together the infrastructure needed to transform a bunch of markdown and image files into a website.</p><p>The default setup is a good place to start, but you will want to display your information your way. In my opinion, a good early step is to learn what others have done to customize their own sites. The list of sites that have shared their implementation is probably larger than you'd think. One of the many sites I visited had a page dedicated to exploring some of these sites. It's called <code>Wrestling With Publish</code>, and there's a link at the bottom of the page. I recommend you visit the sites yourself and see how they work.</p><h2>Some Published Sites (and a theme or two)</h2><p>I downloaded quite a few of these projects and visited each site built by the projects (where available). As I navigated through each site, I tried to identify for myself what was different in each, as well as what they had in common. Doing this I was able to pick out new details I had missed when just casually glancing at other sites.</p><h3>How Do They Differ From Each Other?</h3><p>You'd be surprised at how much customization some people have put into their website. Sometimes it was the way the information was being presented, but at others it was more about how things were organized - how everything fit together. And of course color choices can make a site stand out, as well as images (gifs, jpgs, pngs are all easily integrated into the site).</p><p>When I found a feature that seemed new or useful, I made a note of it so I could return later and match the site with the source code published on GitHub. This helped me come up with a short list of features that I wanted to add to my own site.</p><h2>Weissazool - A Blog With Images</h2><p><a href="https://weissazool.github.io/blog/2020-07-23-sotd/">Itabashi Tenso Shrine</a></p><p>Nice example of image and post together and how to do that. Each SOTD (Shrine of the Day) entry is the equivalent of a cell in a tableview complete with an image and link to a full page entry.</p><p>Use the cell design code as a starting point.</p><h3>Content</h3><p>where Content has two folders at its top level</p><h4>Blog</h4><p>A long list of filenames with embedded dates in YYYY-MM-DD format.</p><p>There is an <code>index.md</code> file, but it is completely empty.</p><p>The yaml tags at the top of the file include a line like this:</p><pre><code>image: ./../../sotd/tofukuji.<span class="property">jpeg</span>
</code></pre><p>the first dot is the current folder the first set of double dots is the <code>blog</code> folder the next set of double dots are the <code>Content</code> folder. Notice that <code>Output</code> is implicit as you move back down the file hierarchy, as <code>sotd</code> is the name of a folder directly at the root. Finally you have the filename of the image.</p><h3>Resources</h3><h3>The <code>sotd</code> Folder under Resources</h3><p>This folder's contents are all <code>.jpeg</code> files.</p><p>The SectionID enum has two cases: <code>blog</code> and <code>projects</code></p><p>In main.swift you have just this publishing step:</p><pre><code><span class="keyword">try</span> <span class="type">Weissazool</span>().<span class="call">publish</span>(
  withTheme: .<span class="dotAccess">weissazool</span>,
  deployedUsing: .<span class="call">gitHub</span>(<span class="string">"weissazool/weissazool.github.io"</span>, useSSH: <span class="keyword">false</span>)
)
</code></pre><p>imagePath is left nil</p><p>the <code>ItemMetadata</code> is left blank</p><p>there is a template file which reflects the structure of the individual blog entries: the yaml at the top</p><h5>An Actual Entry</h5><pre><code>[&lt;figure&gt;
  &lt;img src=<span class="string">"./../../sotd/kinoene.jpeg"</span>
  alt=<span class="string">"A lamp post advertising Kinoene soy sauce."</span>/&gt;
  &lt;figcaption&gt;<span class="type">Caption</span>&lt;/figcaption&gt;
&lt;/figure&gt;](./../../sotd/kinoene.<span class="property">jpeg</span>)
</code></pre><h5>The Template</h5><pre><code>[&lt;figure&gt;
  &lt;img src=<span class="string">"./../../sotd/shrine-image.jpeg"</span>
  alt=<span class="string">"alt text"</span>/&gt;
  &lt;figcaption&gt;<span class="type">Caption</span>&lt;/figcaption&gt;
&lt;/figure&gt;](./../../sotd/shrine-image.<span class="property">jpeg</span>)
</code></pre><h3>Sources</h3><p>Surprisingly, this isn't just <code>.swift</code> files. but a mix of <code>.swift</code>, <code>.scss</code>, and <code>.png</code> files - as well as the template <code>.md</code> file already mentioned. There is only one other <code>.swift</code> file besides <code>main</code>, and that file extends <code>Theme</code> to include a variable which returns the custom theme for the site</p><pre><code><span class="keyword">extension</span> <span class="type">Theme</span> <span class="keyword">where</span> <span class="type">Site</span> == <span class="type">Weissazool</span> {
  <span class="comment">/// Modified from the default "Foundation" theme that Publish ships with, a very
  /// basic theme mostly implemented for demonstration purposes.</span>
  <span class="keyword">static var</span> weissazool: <span class="type">Self</span> {
    <span class="type">Theme</span>(
      htmlFactory: <span class="type">WeissazoolHTMLFactory</span>(),
      resourcePaths: [<span class="string">"Resources/theme/styles.css"</span>]
    )
  }
}
</code></pre><p>In this file you'll also find his definition of an <code>HTMLFactory</code>. He implements the required methods, plus a couple of others.</p><pre><code>   <span class="keyword">func</span> head(for location: <span class="type">Location</span>, on site: <span class="type">Site</span>) -&gt; <span class="type">Node</span>&lt;<span class="type">HTML</span>.<span class="type">DocumentContext</span>&gt; {]
  
  <span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>,
                     context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {}

  <span class="keyword">func</span> makeSectionHTML(for section: <span class="type">Section</span>&lt;<span class="type">Site</span>&gt;,
                       context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {


  <span class="keyword">func</span> makeItemHTML(for item: <span class="type">Item</span>&lt;<span class="type">Site</span>&gt;,
                    context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {}

  <span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>,
                    context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {}

  <span class="keyword">func</span> makeTagListHTML(for page: <span class="type">TagListPage</span>,
                       context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {}

  <span class="keyword">func</span> makeTagDetailsHTML(for page: <span class="type">TagDetailsPage</span>,
                          context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span>? {}
</code></pre><p>Finally, he extends Plot.Node</p><p>Plot (also written by John) is a <a href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a> which enables you to write swift code that can be automatically translated into HTML in a more type-safe way.</p><p>&gt;Plot treats all elements and attributes that a document contains as nodes. When using the Plot DSL, each time you create a new element, or add an attribute to an existing one, you are creating a node. Nodes can also contain just text, which can either be escaped or treated as raw, pre-processed text. Groups can also be created to form components.</p><pre><code>   <span class="keyword">static func</span> wrapper(<span class="keyword">_</span> nodes: <span class="type">Node</span>...) -&gt; <span class="type">Node</span> {}

  <span class="keyword">static func</span> header&lt;T: <span class="type">Website</span>&gt;(
    for context: <span class="type">PublishingContext</span>&lt;<span class="type">T</span>&gt;,
    selectedSection: <span class="type">T</span>.<span class="type">SectionID</span>?
  ) -&gt; <span class="type">Node</span> {}
  
  <span class="keyword">static func</span> itemList&lt;T: <span class="type">Website</span>&gt;(for items: [<span class="type">Item</span>&lt;<span class="type">T</span>&gt;], on site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {}
    
  <span class="keyword">static func</span> tagList&lt;T: <span class="type">Website</span>&gt;(for item: <span class="type">Item</span>&lt;<span class="type">T</span>&gt;, on site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {}

  <span class="keyword">static func</span> footer&lt;T: <span class="type">Website</span>&gt;(for site: <span class="type">T</span>) -&gt; <span class="type">Node</span> {}
</code></pre><h2>Joe Blau</h2><p><a href="https://joeblau.com/">Joe Blau</a></p><p>I love this site. He calls himself a <code>Design Engineer</code>, and it is clear that this is his thing.</p><h3>Very Individualistic</h3><p>The landing page has an old school look. It looks like you are viewing the console of a terminal, and he is issuing the <code>blau</code> command with different parameters - each set of output corresponds to category of a classic resume. The unix-like output is similar to a man page and provides a maximum amount of information while taking up very little space. There are no links in this top portion of the page - they are all relegated to the bottom of the page in two sections providing information on how to contact him. One section provides his email and phone number, the other is a list of his socials.</p><p>To complete the illusion, the final line displays a blinking cursor on a blank command line.</p><p>Take a look at one of links: <a href="https://conquer.earth/joeblau">Conquer Earth</a></p><p>The last time I looked, he had visited <strong>276</strong> places around the world.</p><p>He has broken out his Plot.Node extensions into multiple files</p><p>CallToAction<br>Features<br>Footer<br>Header<br>Hero<br><br>Just take a look at his "read me first" page. His picture at the top, next a row of "buttons" that highlight as you scroll over them. One each for twitter, insta, GitHub and his home site.</p><p>What follows mirrors the struct of the <code>blog</code> folder described under <code>Weissazool</code>s <code>Content</code> folder. What's interesting here is that you don't see the entire article. At an appropriate breakpoint in the content there is a <code>Continue Reading</code> button. [will need to see how that is done]</p><p>The <code>Next</code> button on the bottom of the page has the same appearance (including highlighting as you scroll over them) as the buttons at the top of the page. Tap on the button and you'll see that the subsequent pages display the page number at the top above a divider/separator/line.</p><p>Joe has given a lot of though as to how to organize his data, and here are just two of the protocols he's defined for himself:</p><pre><code><span class="keyword">public protocol</span> BulletPointable {
    <span class="keyword">var</span> symbol: <span class="type">String</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> tags: [<span class="type">String</span>]? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> images: [<span class="type">String</span>]? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> title: <span class="type">String</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> description: <span class="type">String</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> url: <span class="type">URL</span>? { <span class="keyword">get set</span> }
}

<span class="keyword">public protocol</span> BlauThemable: <span class="type">Website</span> {
    <span class="keyword">var</span> hero: <span class="type">HeroSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> header: <span class="type">HeaderSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> features: <span class="type">FeatureSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> callToAction: <span class="type">CallToActionSectionable</span>? { <span class="keyword">get set</span> }
    <span class="keyword">var</span> footer: <span class="type">FooterSectionable</span>? { <span class="keyword">get set</span> }
}
</code></pre><p>I want to point out two of the factory methods he's implemented.</p><pre><code>        <span class="keyword">func</span> makeIndexHTML(for index: <span class="type">Index</span>,
                           context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
            <span class="type">HTML</span>(
                .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
                .<span class="call">head</span>(for: index,
                      on: context.<span class="property">site</span>,
                      titleSeparator: <span class="string">" | "</span>,
                      stylesheetPaths: <span class="call">buildStyleSheettPaths</span>(for: context.<span class="property">site</span>),
                      rssFeedPath: .<span class="dotAccess">defaultForRSSFeed</span>,
                      rssFeedTitle: <span class="keyword">nil</span>),
                .<span class="call">body</span>(
                    .<span class="call">header</span>(for: context.<span class="property">site</span>),
                    .<span class="call">main</span>(
                        .<span class="call">features</span>(for: context.<span class="property">site</span>),
                        .<span class="call">callToAction</span>(for: context.<span class="property">site</span>)
                    ),
                    .<span class="call">footer</span>(for: context.<span class="property">site</span>)
                )
            )
        }
</code></pre><pre><code>       <span class="keyword">func</span> makePageHTML(for page: <span class="type">Page</span>,
                          context: <span class="type">PublishingContext</span>&lt;<span class="type">Site</span>&gt;) <span class="keyword">throws</span> -&gt; <span class="type">HTML</span> {
            <span class="type">HTML</span>(
                .<span class="call">lang</span>(context.<span class="property">site</span>.<span class="property">language</span>),
                .<span class="call">head</span>(for: page,
                      on: context.<span class="property">site</span>,
                      titleSeparator: <span class="string">" | "</span>,
                      stylesheetPaths: <span class="call">buildStyleSheettPaths</span>(for: context.<span class="property">site</span>),
                      rssFeedPath: .<span class="dotAccess">defaultForRSSFeed</span>,
                      rssFeedTitle: <span class="keyword">nil</span>),
                .<span class="call">body</span>(
                    .<span class="call">header</span>(
                        .<span class="call">h1</span>(.<span class="call">text</span>(page.<span class="property">title</span>)),
                        .<span class="call">h3</span>(.<span class="call">text</span>(page.<span class="property">description</span>))
                    ),
                    .<span class="call">main</span>(
                        .<span class="call">section</span>(
                            .<span class="call">class</span>(<span class="string">"max-section"</span>),
                            page.<span class="property">body</span>.<span class="property">node</span>
                        )
                    ),
                    .<span class="call">footer</span>(for: context.<span class="property">site</span>)
                )
            )
        }
</code></pre><p>So much power in so few lines.</p><p>Extra features: beautiful capsule buttons, excerpted articles with buttons to view the entire entry.</p><p>Because the source code for the actual site isn't posted on GitHub (only the theme is published) I will have to come back to this after I've explored some of the other sites. Obviously, this is my favorite so far.</p><h2>Povilas Staškus</h2><p><a href="https://www.staskus.io/">Povilas Staškus - iOS Developer</a></p><p>Besides <code>Publish</code> he uses the <code>Splash</code> plugin (<code>SplashPublishPlugin</code>). Don't assume that means there are no bells or whistles here. His blog pages are exceptionally well thought-out and present well.</p><p>The page layout consists of a row at the top (the four .md files at the base of the <code>Content</code> folder), followed by a two column layout. On the left is an avatar and social links, on the right is the scrolling list of blog entries found in his <code>posts</code> folder (directly under <code>Content</code>) with a <code>RECENT POSTS</code> header.</p><p>His buttons are colorized and rather than changing their background color when hovered over, an underline appears underneath the button label's text</p><p>Each row or cell has similar yaml, which provides most of the formatting applied.</p><pre><code>---
title: <span class="type">Building</span> a real-world iOS app (<span class="type">Part</span> <span class="number">1</span>): <span class="type">Introduction</span>
date: <span class="number">2019</span>-<span class="number">03</span>-<span class="number">11 12</span>:<span class="number">00</span>
tags: <span class="type">Tutorial</span>, iOS, <span class="type">Swift</span>
excerpt: <span class="type">We</span>'ll be creating and releasing an iOS application by showing a real thinking process, going through essential steps and providing the motivation behind them.
---
</code></pre><p>The title also functions as a link - scrolling over it displays an underline, tapping on it brings up the full entry on its own page.</p><p>Beside a folder full of extensions to Plot.Node (I'm detecting a pattern here), there are 3 additional files for a date formatter, html factory and a Theme identifier.</p><pre><code><span class="keyword">extension</span> <span class="type">DateFormatter</span> {
    <span class="keyword">static var</span> blog: <span class="type">DateFormatter</span> = {
        <span class="keyword">let</span> formatter = <span class="type">DateFormatter</span>()
        formatter.<span class="property">dateStyle</span> = .<span class="dotAccess">long</span>
        <span class="keyword">return</span> formatter
    }()
}
</code></pre><p>Nothing fancy, the standard <code>.long</code> date style. It does a nice job of keeping the interface clean.</p><p>Other notes:</p><p>&gt;Fairly comprehensive, includes avatar links to socials. Professional in appearance.<br><a href="https://yusufozgul.com/">index | Yusuf Özgül | Blog | Resume | Portfolio</a></p><p>The top of the page has his name followed by the major components of the site (buttons that highlight as they are scrolled over) all over a dark background (foreground/text is white, background is black, highlighted background on the buttons is blue)</p><p>The blog list shows the most recent posts, a button at the bottom displays all posts (sorted by date descending)</p><p>He has a <code>Contact</code> page that uses <code>Typeform</code></p><p>His <code>Projects</code> page lists his open source work on GitHub, and apps in the AppStore</p><p>Despite the relatively simple theme, he’s got a fairly intricate set of conditionals, which may help you sort out how to write your own theme. Also interesting is a loader class that creates the static pages of the site. Uses <code>SplashPublishPlugin</code> and many others. In fact, he has the most plugins of any of the projects I've discussed:</p><pre><code>     targets: [
        .<span class="call">executableTarget</span>(name: <span class="string">"YusufozgulCom"</span>,
        dependencies: [
                            <span class="string">"Publish"</span>,
                            <span class="string">"ReadingTimePublishPlugin"</span>,
                            <span class="string">"TwitterPublishPlugin"</span>,
                            <span class="string">"SplashPublishPlugin"</span>,
                            <span class="string">"ImageAttributesPublishPlugin"</span>,
                            <span class="string">"LinkAttributesPublishPlugin"</span>,
                            <span class="string">"GistPublishPlugin"</span>,
                            <span class="string">"VerifyResourcesExistPublishPlugin"</span>,
                            <span class="string">"YoutubePublishPlugin"</span>,
                            <span class="string">"CNAMEPublishPlugin"</span>,
                          ])
    ]
</code></pre><p>This is reflected in the most involved <code>.publish()</code> command we've seen so far:</p><pre><code><span class="keyword">try</span> <span class="type">YusufozgulCom</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">yusufozgulcom</span>,
                            indentation: <span class="keyword">nil</span>,
                            at: <span class="keyword">nil</span>,
                            rssFeedSections: [.<span class="dotAccess">blogs</span>, .<span class="dotAccess">projects</span>],
                            rssFeedConfig: <span class="keyword">nil</span>,
                            additionalSteps: [.<span class="call">installPlugin</span>(.<span class="call">readingTime</span>(wordsPerMinute: <span class="number">40</span>)),
                                              .<span class="call">generateSiteMap</span>(),
                                              .<span class="call">installPlugin</span>(.<span class="call">verifyResourcesExist</span>()),
                                              .<span class="call">generateRSSFeed</span>(including: [.<span class="dotAccess">blogs</span>, .<span class="dotAccess">projects</span>]),
                                              .<span class="call">removeAllItems</span>(in: .<span class="dotAccess">blogs</span>, matching: .<span class="keyword">init</span>(matcher: { item <span class="keyword">in</span>
                                                item.<span class="property">metadata</span>.<span class="property">isDraft</span> ?? <span class="keyword">false</span>
                                              })),
                                              .<span class="call">installPlugin</span>(.<span class="call">generateCNAME</span>(with: [<span class="string">"yusufozgul.com"</span>, <span class="string">"www.yusufozgul.com"</span>]))
                            ],
                            plugins: [.<span class="call">twitter</span>(),
                                      .<span class="call">youtube</span>(),
                                      .<span class="call">gist</span>(renderer: <span class="type">ColorGistRenderer</span>()),
                                      .<span class="call">linkAttributes</span>(),
                                      .<span class="call">imageAttributes</span>(),
                                      .<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>),
                                      <span class="comment">//.publishGallery()</span>
                            ])
</code></pre><p>.pct 88</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/Writing%20Tests</guid><title>Writing Tests</title><description>The Role of Testing in Your Development Process</description><link>https://github.com/mozahler/mozahler.github.io/posts/Writing%20Tests</link><pubDate>Wed, 12 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Tests and Test Driven Development</h2><p>It would be a mistake to think that you waste your time when writing tests. Tests give back in many ways. In fact there’s a whole philosophy of coding devoted to Test Driven Development (TDD). I want to spend a few minutes describing this approach.<br><br>In TDD you write the test before you write the actual code. When you write a test and execute it, it should fail. After all, you found a problem, documented it, and wrote a test that uncovers the problem. But the first time you run your test, you haven’t yet fixed the code, so you get an error. If you don't, then you need to retrace your steps. All in all, this is a good thing.<br><br>### Oh, the Circularity…<br><br>You’ve written a test, run the test, it fails. Now you fix your code.<br><br>Once you’ve written your fix, you run your test. Does it succeed? Does the code now work as it was meant to? It’s possible that the answer to one of these questions is a yes and the other is a no. Maybe your test has a bug?<br><br>The biggest benefit of using TDD, in my opinion, is that it allows you to refactor more easily. In fact, there’s a school of thought that says that unless you have tests that prove that your changes fixed the errors they were designed to catch, then it’s not considered refactoring.<br><br>If you have set up a harness of tests that prove that your code is working, and do some refactoring - how hard is it to run your tests on the new code? It’s as easy as can be, you just click on a button in Xcode and run your test code. If you did your work correctly, then your tests will pass. If your tests fail then at least you have an insight into what you didn’t account for in the original code. Of course, there’s no guarantee that your code will always work after writing a test. Maybe in the process of fixing your broken tests you are able to write a couple more. The goal isn't the highest number of tests possible, it is to get the best overall coverage of your code. Certainly, if you are about to change something fundamental in your interface, you want to make sure you have a suite of passing tests that prove that your interface works as designed.<br><br>You'll find that over time the way you write your tests and your code evolve to make this iterative approach more efficient.<br><br>[add links to this file that point to the tutorials and the test that were written for them - hint hint]</p><h2>Would You Like to Learn More About Test Driven Development?</h2><p>Check out the links below for a number of video tutorials on Test Driven development. I absolutely admire those who work this way. You don't want to be one of those developers who tends to dive into coding far too early, and then spends a great deal of time halfway through their project refactoring and getting it to where it needs to be. TDD is the opposite of that. I could definitely write more about it if people were interested. Let me know.<br><br>## Summary<br><br>Just as you shouldn’t code without creating backups regularly, you can’t refactor without tests. Ask anyone who has had to refactor a medium to large app. You need to know when you’ve messed up - as soon as possible. You also need that reassurance you get when you’ve run all your tests and they all pass. It will give you the boost you need to forge ahead and make even more changes.<br><br>## Links</p><p><a href="https://chris.eidhof.nl/post/becoming-a-better-programmer-test-driven-development/">Chris Eidhof - Test Driven Development</a><br><a href="https://stackoverflow.com/questions/4114083/ios-tests-specs-tdd-bdd-and-integration-acceptance-testing">StackOverflow</a><br><br>### Videos<br><br><a href="https://talk.objc.io/episodes/S01E53-test-driven-reactive-programming">Chris Eidhof and Lisa Luo - Test Driven Reactive Programming</a><br><br><a href="https://talk.objc.io/episodes/S01E51-playground-driven-development">Chris and Brandon Williams - Playground Driven Development</a><br><br>.pct 90</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/How%20Much%20CSS%20Do%20I%20Have%20to%20Learn</guid><title>How Much CSS Do I Have to Learn</title><description>Taking a Look At All Those Moving Parts That Make Your Site Possible</description><link>https://github.com/mozahler/mozahler.github.io/publish/How%20Much%20CSS%20Do%20I%20Have%20to%20Learn</link><pubDate>Mon, 10 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>How Much CSS Do I Have to Learn?</h2><p><strong>CSS</strong> stands for <code>Cascading Style Sheets</code>. It can save you a lot of work when used correctly to format the layout of your web page. With CSS, you can control the color, font, the size of text, the spacing between elements, how elements are positioned and laid out, what background images or background colors are to be used, different displays for different devices and screen sizes, and more.<br><br>## How did I get here?<br><br>### It can be overwhelming working with many DSL's, programming languages and networking - especially when most of it is brand new to you.<br><br>I'm not just talking about adopting <code>CSS</code> here. It's a stand-in for whatever technology you decide your site is lacking.<br><br>So any time I pick up a new technology or otherwise wander outside my safe space I am confronted with a dilemma - how much time do I spend on learning this? I rarely know the answer to this question, which means I also don't know whether it is a wise investment of my time. Setting up this website introduced me to a whole set of problems I had never encountered before.<br><br>### Let's just run with one example.<br><br>I've been through a handful of tutorials and have a css file that is possibly a bit messy. I took a look at how others set up their sites, and made notes of the features I liked and would like to emulate. So far I've cloned the publish package onto my computer and created a website using the defaults. I may have copied and pasted some code I didn't fully understand. In any event, most of the adjustments to the original setup (so far) have been issues of configuration and overall layout. It appears as though I'm on the right track.</p><h2>Unfortunately I Took a Detour</h2><p>I had the hardest time figuring out how to fine tune the background colors. First, I would make changes to the css and not see them reflected on the page, and then even when I saw changes they weren't what I expected. What went wrong and how do I get back on track?<br><br>I admit up front that I foolishly dug my own hole and jumped into it both feet first. But I was able to recover.<br><br>I know that my style.css is going to dictate my colors - at least when I'm done with it it will. So I took a look at what was in there. Near the top of the file I found this <code>.css</code> code that was being called:<br><br><code></code>`css --vermilion: #e90000ff; --gamboge: #d49705ff; ... --background-color: var(--vermilion);</p><pre><code>

<span class="type">First</span> of all, <span class="type">I</span> am going to assume these are colors <span class="keyword">in</span> the hex <span class="type">RGBA</span> format. <span class="type">I</span> <span class="keyword">set</span> the background of my main page to vermilion, built and ran the project, and refreshed my browser to check out the results.  

<span class="type">I</span> was expecting something <span class="string">"bright reddish"</span>, instead it looked pretty white to me. <span class="type">Since</span> <span class="string">"#e90000ff"</span> works out to a very red hue, and <span class="type">I</span> was getting white, something <span class="keyword">else</span> was a problem. <span class="type">Looking</span> <span class="keyword">for</span> other places that color <span class="keyword">is</span> being specified, <span class="type">I</span> scanned further down the file and <span class="type">I</span> found code like this:

</code></pre><p>css pre code .keyword { color: #b294bb }</p><pre><code>

<span class="type">Instead</span> of an eight-digit hex value like <span class="type">I</span> saw <span class="keyword">for</span> vermillion, this second color <span class="keyword">is</span> defined with six - presumably `rrggbb`. <span class="type">I</span>'ll discuss this a little more <span class="keyword">in</span> just a bit. <span class="type">Let</span>'s keep looking.  

<span class="type">I</span> also see what <span class="type">I</span> assume <span class="keyword">is</span> a fairly light gray:

</code></pre><p>css .item-list img { border: 1px solid #ddd; ... }</p><pre><code>

<span class="type">Given</span> the three digits, if this <span class="keyword">is</span> rgb then we are talking values of <span class="number">0</span>-<span class="number">15</span> per color instead of <span class="number">0</span>-<span class="number">255</span>

<span class="type">Which</span> <span class="keyword">is</span> fine. <span class="type">Except</span> - so far we have <span class="number">3</span> different <span class="string">"encodings"</span> <span class="keyword">for</span> color.

<span class="type">Let</span>'s go back.

<span class="type">So I</span> change the background to gamboge. <span class="type">Is</span> it a color? <span class="type">I</span>'ve never heard of it, <span class="keyword">let</span>'s see what it looks like'

</code></pre><p>css --background-color: var(--gamboge);</p><pre><code>

<span class="type">I</span> compile and run the package from <span class="type">Xcode</span>, <span class="type">I</span> <span class="keyword">switch</span> over to my safari session and reload the page.

<span class="type">The</span> page refreshes to a dark mustardy beige color. 

![<span class="type">Gamboge</span>](../../images/gamboge.<span class="property">png</span>)

&gt; <span class="type">Gamboge</span> <span class="keyword">is</span> a partially transparent deep saffron to mustard yellow pigment. <span class="type">It</span> <span class="keyword">is</span> the traditional colour used to dye <span class="type">Buddhist</span> monks' robes.  

<span class="type">I</span> still have my suspicions regarding the <span class="number">8</span> digit rgb, but so far, so good. 
<span class="type">What</span> <span class="keyword">if</span> the <span class="number">8</span> digit rgb plus opacity value <span class="keyword">is</span> being interpreted differently from what <span class="type">I</span> expect? <span class="type">Maybe</span> (like the code lower <span class="keyword">in</span> the file) only the first three digits are important?

<span class="type">Let</span>'s change the first <span class="number">3</span> digits to be 'd00''

</code></pre><p>css --gamboge: #d00705ff;</p><pre><code>

<span class="type">Any</span> guesses <span class="keyword">as</span> to what color the background refreshed to?  <span class="type">Red</span>. <span class="type">Upon</span> further thought <span class="type">I</span> realize that this <span class="keyword">is</span> fine - <span class="type">I</span>'ve made the <span class="type">Red</span> component very strong, while the <span class="type">Green</span> and <span class="type">Blue</span> components are actually very small values. <span class="type">So I</span> haven't really demonstrated anything, yet.

another change, from d00 to f00, and sure enough an even brighter red. <span class="type">I</span> haven't really established that things don't work, just that they're not working <span class="keyword">as</span> <span class="type">I</span> expect them to.

<span class="type">So</span> <span class="keyword">is</span> it possible that the css <span class="type">I</span> copied from elsewhere <span class="keyword">is</span> wrong? <span class="type">Well</span>, that's a black hole. <span class="type">Let</span>'s stay on point. <span class="type">I</span>'m trying to understand how to <span class="keyword">get</span> my css to work with me. <span class="type">Let</span>'s <span class="keyword">try</span> one more test. <span class="type">I</span>'ll change the first three digits to '00f' - should be blue, right? <span class="type">After</span> all red <span class="keyword">is</span> <span class="number">0</span>, green <span class="keyword">is</span> <span class="number">0</span> and blue <span class="keyword">is</span> <span class="number">15</span>, or <span class="keyword">as</span> blue can be.

<span class="type">So I</span> save my update: 

</code></pre><p>css --gamboge: #00f705ff;</p><pre><code>

<span class="type">I</span> build and run my project from <span class="type">Xcode</span>. <span class="type">I</span> <span class="keyword">switch</span> over to <span class="type">Safari</span> and reload the page. <span class="type">Here</span>'s what <span class="type">I</span> see:

![<span class="type">ZeroZeroEff</span>](../../images/00f.<span class="property">png</span>)

<span class="type">Isn</span>'t that the prettiest shade of blue you've ever seen? <span class="type">As I</span> look at the hex value <span class="type">I</span> realize that <span class="type">I</span> didn't prove anything. <span class="type">This</span> <span class="keyword">is</span> all a glorious dead-end. <span class="type">I</span> realize that <span class="type">I</span>'m approaching this all wrong. <span class="type">I</span> really want to stop and write a hex color tool that lets me quickly verify my colors, but <span class="type">I</span> have no time <span class="keyword">for</span> that. 

<span class="type">So</span> maybe <span class="type">I</span> should stop guessing at what's going on?

<span class="type">So</span> far <span class="type">I</span>'ve identified the css that changes the background color of my views, and <span class="type">I</span>'ve verified that my page refreshes and picks up the changes following the steps <span class="type">I</span>'ve mentioned. <span class="type">At</span> this point <span class="type">I</span> can safely stop saying <span class="string">"it isn't working' and admit that it **IS** working, but I don't understand how.</span>

<span class="type">I</span>'ve been working offline this morning (my phone <span class="keyword">is</span> charging), and it's time to connect to the internet and figure out what's left to figure out.

<span class="type">Except</span>: <span class="type">What</span> <span class="keyword">do</span> <span class="type">I</span> want to figure out? <span class="type">Why</span> <span class="keyword">do</span> <span class="type">I</span> have <span class="number">3</span> formats <span class="keyword">for</span> colors (and <span class="keyword">do</span> they all work?) <span class="type">Am I</span> limited to <span class="number">16</span> \* <span class="number">16</span> \* <span class="number">16</span> colors instead of <span class="number">256</span> \* <span class="number">256</span> \* <span class="number">256</span>? <span class="type">Can I</span> merge the <span class="number">3</span> color formats by replacing two of them with the third? 

<span class="type">Where</span> does my styles.<span class="property">css</span> file come from? <span class="type">If I</span> recall correctly, <span class="type">I</span> followed a tutorial that said make my own theme by copying and pasting the contents of the swift file `<span class="type">Theme</span>+<span class="type">Foundation</span>.<span class="property">swift</span>`.  

<span class="type">Fair</span> enough.  

<span class="type">My</span> custom theme <span class="keyword">is</span> then <span class="keyword">set</span> up to reference a `styles.<span class="property">css</span>` file <span class="keyword">in</span> '<span class="type">OriginalTheme</span>' which <span class="type">I</span> copied from the `<span class="type">FoundationTheme</span>` folder <span class="keyword">in</span> the `publish` package. <span class="type">Let</span>'s take a look at that file:

</code></pre><p>css /** <em> Publish Foundation theme </em> Copyright (c) John Sundell 2019 <em> MIT license, see LICENSE file for details </em>/</p><ul><li>{ margin: 0; padding: 0; box-sizing: border-box; }</li></ul><p>body { background: #fff; color: #000; font-family: Helvetica, Arial; text-align: center; }</p><p>.wrapper { max-width: 900px; margin-left: auto; margin-right: auto; padding: 40px; text-align: left; }</p><p>header { background-color: #eee; }</p><p>header .wrapper { padding-top: 30px; padding-bottom: 30px; text-align: center; }</p><p>header a { text-decoration: none; }</p><p>header .site-name { font-size: 1.5em; color: #000; font-weight: bold; }</p><p>nav { margin-top: 20px; }</p><p>nav li { display: inline-block; margin: 0 7px; line-height: 1.5em; }</p><p>nav li a.selected { text-decoration: underline; }</p><p>h1 { margin-bottom: 20px; font-size: 2em; }</p><p>h2 { margin: 20px 0; }</p><p>p { margin-bottom: 10px; }</p><p>a { color: inherit; }</p><p>.description { margin-bottom: 40px; }</p><p>.item-list &gt; li { display: block; padding: 20px; border-radius: 20px; background-color: #eee; margin-bottom: 20px; }</p><p>.item-list &gt; li:last-child { margin-bottom: 0; }</p><p>.item-list h1 { margin-bottom: 15px; font-size: 1.3em; }</p><p>.item-list p { margin-bottom: 0; }</p><p>.tag-list { margin-bottom: 15px; }</p><p>.tag-list li, .tag { display: inline-block; background-color: #000; color: #ddd; padding: 4px 6px; border-radius: 5px; margin-right: 5px; }</p><p>.tag-list a, .tag a { text-decoration: none; }</p><p>.item-page .tag-list { display: inline-block; }</p><p>.content { margin-bottom: 40px; }</p><p>.browse-all { display: block; margin-bottom: 30px; }</p><p>.all-tags li { font-size: 1.4em; margin-right: 10px; padding: 6px 10px; }</p><p>footer { color: #8a8a8a; }</p><p>@media (prefers-color-scheme: dark) { body { background-color: #222; }</p><p>body, header .site-name { color: #ddd; }</p><p>.item-list &gt; li { background-color: #333; }</p><p>header { background-color: #000; } }</p><p>@media(max-width: 600px) { .wrapper { padding: 40px 20px; } }</p><pre><code>

<span class="type">It</span>'s pretty amazing that these lines can power the formatting of the entire site. <span class="type">How</span> many color formats <span class="keyword">do</span> you see referenced <span class="keyword">in</span> this file?

<span class="type">One</span>. <span class="type">A</span> hashtag followed by three hex digits followed by a semicolon.

<span class="type">Well</span>, <span class="type">I</span>'m on a deadline and my mission <span class="keyword">is</span> not to understand the ins and outs of migrating colors from markdown to html just now.

<span class="type">I</span> take another look at my `styles.<span class="property">css</span>` file and realize that it <span class="keyword">is in</span> three sections. <span class="type">I</span> knicked the top part from one site, and the bottom part was added to help me colorize via syntax highlighting. <span class="type">I</span>'ve gotten syntax highlighting to work well enough <span class="keyword">for</span> now, so <span class="type">I</span> know <span class="type">I</span> don't want to play with this section. <span class="type">Instead I</span> just add a comment to the top of this third section explaining it was added <span class="keyword">for</span> syntax highlighting and decide to leave it alone - it works fine <span class="keyword">for</span> now.

<span class="type">As</span> a side note, the only color formatting <span class="type">I</span> find <span class="keyword">in</span> this bottom section is:

</code></pre><p>css background-color: #1a1a1a;</p><pre><code>

<span class="type">Besides</span> describing a very dark color, this code tells me that my syntax-highlighted source code <span class="keyword">is</span> going to be rendered with <span class="number">256</span> * <span class="number">256</span> * <span class="number">256</span> colors and the line provides no opacity information. <span class="type">I</span> can live with that.

<span class="type">So</span> now <span class="type">I</span>'ve narrowed down my issues to the top of the file, which <span class="type">I</span> copied from a site that had a color scheme <span class="type">I</span> liked. <span class="type">I</span> thought <span class="type">I</span> could start from there.

</code></pre><p>css :root { --vermilion: #e90000ff; --smoky-black: #120a02ff; --magnolia: #f5f5ffff; --gamboge: #d49705ff; --almond: #f0e1ccff;</p><p>--background-color: var(--almond); --primary-item-color: var(--magnolia); --secondary-item-color: var(--vermilion); --primary-text-color: var(--smoky-black); --secondary-text-color: var(--magnolia); }</p><p>@media (prefers-color-scheme: dark) { --background-color: var(--smoky-black); --primary-item-color: var(--gamboge); --secondary-item-color: var(--vermilion); --primary-text-color: var(--magnolia); --secondary-text-color: var(--gamboge); }</p><p>:root { --vermilion: #e90000ff; /<em> it is very dark </em>/ --smoky-black: #120a02ff; /<em> This is wrong - it is white </em>/ --magnolia: #f5f5ffff; /<em> this is a mustardy dark beige </em>/ --gamboge: #00f705ff; --almond: #f0e1ccff;</p><p>--background-color: var(--gamboge); --primary-item-color: var(--magnolia); --secondary-item-color: var(--vermilion); --primary-text-color: var(--smoky-black); --secondary-text-color: var(--magnolia); }</p><p>@media (prefers-color-scheme: dark) { --background-color: var(--smoky-black); --primary-item-color: var(--gamboge); --secondary-item-color: var(--vermilion); --primary-text-color: var(--magnolia); --secondary-text-color: var(--gamboge); }</p><pre><code>

<span class="type">I</span> go back to the source code <span class="keyword">for</span> the temple site that <span class="type">I</span> copied  

[<span class="type">Weissazool</span>](https://weissazool.<span class="property">github</span>.<span class="property">io</span>/projects/)  

and see a style sheet that <span class="type">I</span> did not port over: `temple-palette.<span class="property">scss</span>`  

<span class="type">Aha</span>! <span class="type">So</span> the original site wasn't using just using .<span class="dotAccess">css</span> files, but also `.scss` files. 

## <span class="type">SCSS

SCSS</span> contains all the features of <span class="type">CSS</span> and contains more features that are not present <span class="keyword">in</span> <span class="type">CSS</span> which makes it a good choice <span class="keyword">for</span> developers to use. <span class="type">SCSS</span> <span class="keyword">is</span> full of advanced features: it offers variables, and you can shorten your code by using variables.  
  
<span class="type">SCSS</span> : <span class="type">Syntactically Awesome Style Sheet</span> <span class="keyword">is</span> the superset of <span class="type">CSS</span>. <span class="type">SCSS</span> <span class="keyword">is</span> the more advanced version of <span class="type">CSS</span>. <span class="type">SCSS</span> was designed by <span class="type">Hampton Catlin</span> and was developed by <span class="type">Chris Eppstein</span> and <span class="type">Natalie Weizenbaum</span>. <span class="type">Due</span> to its advanced features it <span class="keyword">is</span> often termed <span class="keyword">as</span> <span class="type">Sassy CSS</span>. <span class="type">SCSS</span> have file <span class="keyword">extension</span> of .<span class="dotAccess">scss</span>.  

## <span class="type">Drawing</span> the <span class="type">Line  

Guess</span> what? <span class="type">This</span> <span class="keyword">is where</span> <span class="type">I</span>'m drawing that line. <span class="type">I</span> don't need to understand scss files. <span class="type">Yes I</span> looked them up and now <span class="type">I</span> know <span class="type">I</span> have the option of enhancing my appearance using yet another <span class="keyword">set</span> of rules.

<span class="type">But I</span> need to <span class="keyword">get</span> back to finishing my website.

<span class="type">I</span> swap out my <span class="number">8</span> digit hex codes <span class="keyword">for</span> <span class="number">3</span> digit codes and <span class="type">I</span>'m back <span class="keyword">in</span> business.

</code></pre><p>css :root { /<em> Light Mode </em>/ --lprimary: #09e; --lsecondary: #c21; --laccent: #b19; --lb1: #fff; --lb2: #dff;<br> /<em> Dark Mode </em>/ --dprimary: #ed4; --dsecondary: #a86; --daccent: #ca2; --db1: #222; --db2: #10a;<br> --background-color: var(--1b1); --primary-item-color: var(--lprimary); --secondary-item-color: var(--lsecondary); --primary-text-color: var(--laccent); --secondary-text-color: var(--lb2); }</p><p>@media (prefers-color-scheme: dark) { --background-color: var(--db1); --primary-item-color: var(--db2); --secondary-item-color: var(--daccent); --primary-text-color: var(-dbprimary); --secondary-text-color: var(--dsecondary); }</p><pre><code>

<span class="type">Once I</span> got rid of the background noise everything sorted itself rather quickly.

<span class="type">Case</span> closed. (<span class="type">For</span> now.)

## <span class="type">Links</span>

[<span class="type">Gamboge</span> - <span class="type">Wiki</span>](https://en.<span class="property">wikipedia</span>.<span class="property">org</span>/wiki/<span class="type">Gamboge</span>)

[<span class="type">CSS</span>](https://www.<span class="property">w3schools</span>.<span class="property">com</span>/html/html_css.<span class="property">asp</span>)  

.<span class="property">pct</span>
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/None%20of%20This%20is%20Written%20in%20Stone</guid><title>None of This is Written in Stone</title><description>The Ephemeral Nature of Programming for a Mobile Device</description><link>https://github.com/mozahler/mozahler.github.io/posts/None%20of%20This%20is%20Written%20in%20Stone</link><pubDate>Sun, 9 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>None of This is Written in Stone</h2><p>On a recent trip to Manhattan, I had lunch with an old friend of mine. He is a professional music critic, writer and teacher. One thing he said to me that has unexpectedly rattled inside my head ever since is this candid confession from him (I'm paraphrasing)</p><p>&gt;I've learned that my reviews are snapshots of something ephemeral, they reflect my immediate impressions of a concert and I don't try to make them more than that. If I'm on deadline and have to write a review at 11:00 pm after a 3 hour concert, I can only write about what I'm feeling in the moment. If I were to hear the same piece the next afternoon I might walk away with a different impression of what I just heard.</p><p>Much of what I've written in this blog is ephemeral. The technology that programming is based on is rapidly evolving and becoming ever more powerful - if also bringing additional complexity to the overall picture. If something doesn't work for you, then try something else. Maybe you'll find a new API that makes it easier to accomplish something that used to require jumping through too many hoops. Perhaps you already have an implementation in Kotlin - or you just found one that's pretty close to what you need. Is there a tool to transform the code without rewriting the whole thing from scratch? You won't know unless you look.</p><h3>There's Got to be a Better Way</h3><p>When it comes to programming, there's always more than one way to do something. Does it need to be adaptable (typically it does), does it rely on the target device having the latest camera technology to work properly? Who are we writing it for? Does it have to support clients who don't immediately upgrade to the latest release, or who only buy a new device every 3-5 years? There are always so many variables when developing and it's easy to forget all the constraints we are juggling.</p><p>.pct 90</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/publish/Structuring%20Your%20Site</guid><title>Structuring Your Site</title><description>Let's Discuss the **Default Website** Before You Customize Your Site</description><link>https://github.com/mozahler/mozahler.github.io/publish/Structuring%20Your%20Site</link><pubDate>Wed, 5 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Publish Overview</h2><p>By following the instructions on John Sundell's GitHub page [link], you can set up a Website on your mac complete with a server to view the results in Safari. I <strong>kid you not</strong> when I say you can have a functional site set up on your mac in less than an hour. How is that even possible?</p><p>John has spent lot of time and effort creating the tools needed and organizing how everything fits together. Before hacking away at things, let's take a look at how things are set up out of the box, and some of the underlying reasons why things are organized the way they are. Once you have a basic understanding of how things work, you'll have an easier time making changes to customize how the site works for you.</p><p>This page outlines some of the conventions to follow while getting your feet wet. As I say often on this site: there's more than one way to do things. But until you can introduce changes to your site and view the results right away, you might feel a bit lost. I recommend you follow the conventions until you are more familiar with how everything fits together.</p><h2>The Folder Layout</h2><h3>The <code>Content</code> Folder</h3><p><code>Content</code> is where you put your website's written content -- blog posts, and other pages.</p><p><code>Publish</code> lets you generate your website's content in two ways: by using markdown files or programmatically. When you add markdown files to <code>Content</code>, <code>Publish</code> parses the content automatically. It (automatically) uses Ink markdown parser library, also created by John Sundell. All of this is fairly transparent to you. I mostly add markdown files that are ready for display, tend to not do this programmatically. If there's any demand I can come up with a demo file or two that approach.</p><h3>Output</h3><p><code>Output</code> is the main folder of the website. It contains all the files necessary to display the content of the website. It's generated every time you build the project in Xcode. Once you start adding more content and custom pages to your website, you'll see more files and folders appear. You should assume everything in this file is read-only. After any changes to your source files or resources, a rebuild or running your project will trigger an update of the content of this folder.</p><p>Even though you don't add to or edit anything in this folder, it contains all the content and information to generate your website. Consider it as read-only. You'll see feed and sitemap files there along with styles.css. This CSS file is the pre-defined styling for your website. You can create your own theme, which in turn can use a custom <code>styles.css</code> file to display your content.</p><h3>Resources</h3><p><code>Resources</code> is where you add any media files for your content, like images, videos, audio, and fonts.</p><h3>Sources</h3><p><code>Sources</code> has all the Swift files to build your website. On initial install there's one main.swift file which contains configuration information for your website. You can add sections, specific item metadata, website properties, and configure publishing steps. Typically you issue the command to "publish" your site at the bottom of this file.</p><h2>The Three Major DataTypes Used By the System</h2><h3>Section, Item, and Page</h3><h4>Sections</h4><p>Special types of webpages, navigated using navigation menu.</p><h4>Items</h4><p>Blog posts.</p><h4>Pages</h4><p>Standalone webpages on your website.</p><p>Each Section, Item, and Page can define its own set of Content — which can range from text (like titles and descriptions), to HTML, audio, video and various kinds of metadata.</p><p>For the most part, this is the typical structure used by most developers but I've noticed not everyone follows this layout. I recommend you start by adopting this three folder concept - at least until you are comfortable you understand where everything is and why it's there.</p><h2>Metadata</h2><p><code>Publish</code> makes use of the ItemMetadata type if you choose to give it properties. You can add metadata to the top of your files which, if defined, must match the fields in your <code>ItemMetadata</code> object. A missing field, or a field in the wrong format will stop the compile.</p><h2>Tags</h2><h2>The main File</h2><p>As I mentioned, <code>main</code> is pretty much the only source code file you will find after an initial install. That should signal to you that important stuff goes here.</p><p>After setting everything up and opening my new site, I was elated to see I had posts and navigation built in from the start. There's a dummy entry on the landing page, and you can tap on it to bring up a linked page.</p><p>What I didn't know how to do is to get <strong>my</strong> content onto the site. I thought I had read that everything would automatically be copied from the Content base folder. So I dumped a bunch of files there and and regenerated the site, opened a browser session, navigated to my site.</p><p>No new files.</p><p>What gives? If any of you have Ruby experience, then you've probably had some exposure to <code>Ruby on Rails</code>. For those of you who don't it is [description of RoR]</p><p>Like <code>Ruby on Rails</code>, <code>Publish</code> is designed to hold all your materials in one place, and many things just "magically" work with very little configuration from you. Also like <code>Ruby on Rails</code>, there are plenty of "hooks", or places you can add your own customizations to make the site cater to your needs.</p><h2>Creating Your Own Theme</h2><p>https://www.russellgordon.ca/tutorials/creating-a-custom-theme-using-publish/</p><h2>Links</h2><p><a href="https://danijelavrzan.com/posts/2022/06/publish-creating-content-with-markdown/">Creating Content With Markdown</a></p><p><a href="https://deirdre.dev/wrestling-with-publish/">Wrestling With Publish</a></p><p>Remember that the type of object we create is a <code>Website</code>. By creating a custom <code>Website</code> object you are going to be met with a lot of decision making along the way. If you are going to use any of the extra tools (like Plot or Splash) that are developed for working with <code>Publish</code>, then it makes sense not to stray too far from the intended structure. At least, until you understand how the pieces fit together. What makes things <code>tick</code>.</p><h3>Let's go over some of that now.</h3><h4>The Three Main Datatypes</h4><p>Part of the appeal (to me) of the <code>Website</code> object is that by maintaining this structure you can get the compiler to check your work and make sure that your work is consistent, complete -- you want some assurance that the pieces you are using are the correct ones (that they fit together, at least).</p><p>If you know that a post is always going to be associated with a date (many develop sites that aren't data-centric - so this is not a given), then you will want date to be a property that you can count on being available. Why not make <code>date</code> a property of your <strong>ItemMetadata</strong> object?</p><h3>Metadata</h3><p>possible examples of ItemMetadata use, and the purpose of requiring it up front.</p><h3>Sometimes the Tail Wags the Dog</h3><p>The rippling effect of changes made after the initial setup/the wisdom of organizing your project before making changes to the existing (working) initial setup.</p><p>[Do I bubble the changes up or push them down?]</p><p>So the basic components of a Website</p><p>Before beginning to build up your site it makes sense to decide the layout. In the most general, broadest sense, we know we have a bunch of files and may need to present some of them in more than one way. Some websites emphasize a reverse-chronological approach (newest item at the top). So a date property is going to be important. Similarly, the name of the article could be the file name. Except maybe you don't want to rename your files if you find your focus within the file changing while setting up.</p><p>One of the conventions built into the Website definition and well-supported by the provided tools, is the "Front End YAML" code placed at the top of each file. (YAML - Yet Another Markup Language)</p><p>take a look at this:</p><pre><code>---
date: <span class="number">2018</span>-<span class="number">11</span>-<span class="number">06</span>
title: <span class="type">Midterms</span>
tags: midterms2018
excerpt: <span class="type">This</span> <span class="keyword">is</span> typically the opening paragraph of an article.
---
</code></pre><h3>DRY</h3><p>in this example, let's assume that the <code>excerpt</code> property is meant to summarize the content of the page without repeating the title. I have two choices here: I can write an introductory paragraph that is presented with the full page, or I can write a chunk of text that only appears in the <code>.excerpt</code> property of this metadata. Maybe one of those approaches makes no sense to you. That's fine. In visiting other sites, I see both being used. I have to admit I spent some time on this issue, because I don't like repeating (DRY - Don't Repeat Yourself)</p><p>Instead of using this <code>excerpt</code> property, I could add a separate step in my publishing pipeline where I programmatically grab the second paragraph of every markdown file and create an array or dictionary of the excerpts - obviously I would have to do this early in the pipeline so that this property is available when it is required for display. It boils down to</p><h2>Customizing the Site</h2><p>I want to start off with a simple example. Here's what my build log looks like in Xcode when I hit <strong>Command-B</strong></p><pre><code><span class="type">Publishing Wednesday</span> (<span class="number">7</span> steps)
[<span class="number">1</span>/<span class="number">7</span>] <span class="type">Install</span> plugin '<span class="type">Splash</span>'
[<span class="number">2</span>/<span class="number">7</span>] <span class="type">Copy</span> '<span class="type">Resources</span>' files
[<span class="number">3</span>/<span class="number">7</span>] <span class="type">Add Markdown</span> files from '<span class="type">Content</span>' folder
[<span class="number">4</span>/<span class="number">7</span>] <span class="type">Sort</span> items
[<span class="number">5</span>/<span class="number">7</span>] <span class="type">Generate HTML</span>
[<span class="number">6</span>/<span class="number">7</span>] <span class="type">Generate RSS</span> feed
[<span class="number">7</span>/<span class="number">7</span>] <span class="type">Generate</span> site map
✅ <span class="type">Successfully</span> published <span class="type">Wednesday
Program</span> ended with exit code: <span class="number">0</span>
</code></pre><p>All of this happens due to this small bit of code:</p><pre><code><span class="keyword">do</span> {
    <span class="keyword">try</span> <span class="type">Wednesday</span>().<span class="call">publish</span>(
        withTheme: .<span class="dotAccess">original</span>,
        plugins: [.<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>)]
    )
} <span class="keyword">catch</span> {
    <span class="call">print</span>(error)
    <span class="call">print</span>(error.<span class="property">localizedDescription</span>)
}
</code></pre><p>or if you prefer to see it on just one line:</p><pre><code>     <span class="keyword">try</span> <span class="type">Wednesday</span>().<span class="call">publish</span>(withTheme: .<span class="dotAccess">original</span>, plugins: [.<span class="call">splash</span>(withClassPrefix: <span class="string">""</span>)]
</code></pre><p>Not only does this handle all my markdown files as well as .pngs and .gifs, but it even colorizes my embedded swift code, thanks to the use of the plugin. Of course, I didn't just add the reference to the plugin here and deploy my site. But installing a plugin <strong>is</strong> surprisingly straightforward - it's a simple edit to the Package.swift file.</p><p>This is one way to customize your site.</p><p>Of course customization encompasses a lot of possibilities. Mostly it's about appearance. What color schemes and fonts am I going to use? How do I make these changes happen? How do I want to present my story to the world?</p><p>But customization also means automating pieces of the process to make it easier to add to your site as time goes on.</p><p>I am still coming up with a list of features I want to adopt for my own site.<br><br>.pct 82</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/Adding%20a%20Resource%20File%20to%20Your%20Package</guid><title>Adding a Resource File to Your Package</title><description>An Explanation of How the **Swift Package Manager** Handles Media and Other Non-Swift files</description><link>https://github.com/mozahler/mozahler.github.io/posts/Adding%20a%20Resource%20File%20to%20Your%20Package</link><pubDate>Tue, 4 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Adding a Resource File to Your Package</h2><p>&gt;It's really hard to ask a question when you don't know what the problem is.</p><p>Maybe you think you can just copy and paste a text file into your local package and everything will work like magic?</p><p>Well, a considerable amount of magic does occur behind the scenes when you load a file from resources. Let's' take a peek behind the curtain just long enough to see how we can get the file to load...</p><p>I call it magic because when you build your project there's a lot of work that has to be done that's implicit due to references from your source code and the structure of the project itself. This is a little abstract sounding, so let me give you a concrete example.</p><h3>Read the Contents of a Text File</h3><p>I had a text file I wanted to load for my app, and I didn't want it in my main bundle. I have a dedicated package that needs to use the file, so it's a natural fit for that file to belong to that package.</p><p>Text (and image, audio and other) files that aren't Swift (.swift) files are considered "resources" by the system. So you're not just adding a file, you're adding a (file) resource.</p><p>If this is the first resource you're adding to your project you have a little homework to do.</p><p>Let's look at how to load a file:</p><pre><code><span class="keyword">guard let</span> path = <span class="type">Bundle</span>.<span class="property">module</span>.<span class="call">path</span>(forResource: <span class="string">"sfsymbols"</span>, ofType: <span class="string">"txt"</span>),
	<span class="keyword">let</span> content = <span class="keyword">try</span>? <span class="type">String</span>(contentsOfFile: path)
        <span class="keyword">else</span> {
            <span class="keyword">return</span> []
        }
</code></pre><p>The above code tells the system where to find your file. Well, if all you've done is copied the file to somewhere in your package, then you haven't provided enough information for the system to find it. Let's start with this cryptic message that appears:</p><p>'module' is inaccessible due to 'internal' protection level</p><p>Now the message is telling you exactly what the problem is, so it's not really all tht cryptic is it? OK, let's do a search on the message.</p><p><a href="https://www.google.com/search?client=safari&rls=en&q=%27module%27+is+inaccessible+due+to+%27internal%27+protection+level&ie=UTF-8&oe=UTF-8">Try This!</a></p><p>I'm not saying you won't find the answer in these results, but you have to admit it's not going to be an easy search. If you haven't set up your new addition to the package as a resource, then the code above is just not going to work.</p><p>If you do a search on <code>adding a resource to a local swift package</code> you might find your answer.</p><p>Which is what I did. And of course I had to do one of these: 🤦🏽‍♂️. I do a lot of face-palms when I'm developing. It's the nature of the beast.</p><p>So you want to create a folder called "Resources" in your package underneath the Sources folder. In my case the folder directly under Sources was named for the package itself, and I put the <code>Resources</code> folder inside that folder.</p><p>We're already halfway there!!</p><h3>Configuring the Package.swift file for a resource</h3><p>Now you have a resource in your package, and it's time to configure the package to recognize your file as a valid resource so that it can be bundled up into the package module the next time you perform a build.</p><p>This is pretty straightforward. Adding a resource is like adding a dependency, except there's only one place you have to specify the resources (there are source dependencies and target dependencies, but here we are just talking about specifying the target resource)</p><p>Here's the code you need to add the one file:</p><pre><code>		resources: [
		.<span class="call">process</span>(<span class="string">"Resources/sfsymbols.txt"</span>)
	]
</code></pre><p>Add these lines just inside the closing paren on your target, just after the dependencies:</p><pre><code>     targets: [
        .<span class="call">target</span>(
      		...
      		dependencies: [
              ...
      		],
          resources: [  
            ...
            ]
</code></pre><p>Go ahead and build your project!</p><p>Ooops. It didn't work did it?</p><p>Go ahead and build it again.</p><p>Profit! I told you there was a certain amount of magic involved.</p><p>I won't spoil the magic by telling you why you needed to build it twice. Maybe the compiler saw it didn't have a valid module, finished what it could and errored out. The next time you built it, it found the module (local package) ready to go, and the compile was allowed to complete successfully. Who knows? Maybe it will work differently in the next version of Xcode.</p><p>It's nice to see my project compiling once again!</p><h2>Links</h2><p><a href="https://github.com/xnth97/SymbolPicker">SymbolPicker - GitHub</a><br><br><br>.pct 96</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/swiftui/The%20AppStorage%20Property%20Wrapper</guid><title>The AppStorage Property Wrapper</title><description>A convenient way to save and read variables from UserDefaults and use them in the same way as @State properties.</description><link>https://github.com/mozahler/mozahler.github.io/swiftui/The%20AppStorage%20Property%20Wrapper</link><pubDate>Mon, 3 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>The <strong>@AppStorage</strong> Property Wrapper</h2><h3>@AppStorage</h3><p><code>@AppStorage</code> is a convenient way to save and read variables from UserDefaults and use them in the same way as <code>@State</code> properties. It can be seen as a <code>@State</code> property which is automatically saved to (and read from) UserDefaults.<br><br>User defaults is actually a property list file (plist) which is made accessible programmatically. It can store values of basic datatypes. Since it’s a property list file, stored content is in key-value pairs. The purpose of user defaults is to let us save pieces of data and read them back whenever that’s necessary, quickly and effortlessly. This data is available app-wide and can be updated from anywhere inside an app. User defaults is not meant to be acting as a persistent storage of large data. On the contrary, it’s best for keeping stuff like user preferences or settings. Also, it’s the worst choice a developer can make in order to save sensitive data. User defaults provide no security at all, and it’s easily accessible; so, just don’t do that.<br><br>In programming terms now, we all know from the pre-SwiftUI days that we can access user defaults using the UserDefaults class in the Foundation framework. This is still valid nowadays as well. However, with the advent of the SwiftUI framework, there is a new player around -- the @AppStorage property wrapper.<br><br>@AppStorage is one of the various property wrappers available to use in SwiftUI. We can consider it as an app-wide source of truth, which, however, has one great difference comparing to others -- modified values do not remain in memory, but they get written to the user defaults file. Using it for reading and writing values is straightforward.</p><p>With the <code>@AppStorage</code> property wrapper, writing to user defaults file is just as easy as reading values from it. What actually differs is how we use these properties. When we pass their binding values as arguments to various SwiftUI views and they get updated, those changes will be written in turn to the user defaults file.<br><br>## Links</p><p><a href="https://docs.swift.org/swift-book/ReferenceManual/Attributes.html">Apple OnLine Swift Documentation/Attributes</a><br><br><a href="https://stackoverflow.com/questions/65587932/store-custom-data-type-in-appstorage-with-optional-initializer">Stackoverflow</a><br><br><a href="https://stackoverflow.com/questions/66308518/swiftui-best-practice-for-using-appstorage-for-settings-how-to-read-the-userde">Stackoverflow</a></p><p><a href="https://serialcoder.dev/text-tutorials/swiftui/using-the-appstorage-property-wrapper-in-swiftui/">Using</a><br><br><a href="https://stackoverflow.com/questions/65515378/why-is-my-appstorage-not-working-on-swiftui">Stackoverflow</a><br><br>.pct 90</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/swiftui/BindingsAndPropertyWrappers</guid><title>BindingsAndPropertyWrappers</title><description>A Little Bit of SwiftUI</description><link>https://github.com/mozahler/mozahler.github.io/swiftui/BindingsAndPropertyWrappers</link><pubDate>Sun, 2 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<p>One of Swift’s strengths is its type safety. Its strong typing system and error handling prevents runtime code crashes and other errors in production. By giving the compiler such a central role in enforcing consistency up front, Swift has a shorter feedback loop. This means that many errors in the code are caught up front, giving you the opportunity to fix them before you even try to run the code, greatly reducing the time and effort needed for bug fixing and reducing the risks of deploying low quality code.<br><br>I could spend pages describing why I think <code>SwiftUI</code> is where your time is best spent. But I can say that having already worked my way through Objective-C and the whole evolution of UIKit. Those technologies are essential and they are not going away. Most likely you will have to know how to interact with code linked to these frameworks at some point. I will have more to say about both <code>Objective-C</code> and <code>UIKit</code> later. But for now I think it's best to introduce some of the basic concepts that contribute to the ease of use of <code>SwiftUI</code>.<br><br>Imperative vs. declarative Programming<br><br>Back in the day there were a lot of articles written about the “Massive ViewController” when programming to the UIKit framework - and with good reason. The adaptation of MVC used in the iOS world was not universally admired (nor was it considered MVC by many, but that’s another kettle of fish.) And we’re about to face similar controversies as people try to write complex apps using SwiftUI.<br><br>## Binding and Property Wrappers<br><br>I provide here a brief summary of Binding and its relationship to Property Wrappers. It may seem strange to you that I spend so much time on these two topics, and then rarely mention them in the other chapters. But it's important to understand these concepts - they are fundamental to how SwiftUI works. A more complete discussion of property wrappers requires a discussion of the <code>Combine</code> framework. I will leave that for another day.<br><br>&gt;When using TCA, we are (mostly) going to forego the usual use of <code>@State</code> variables. Instead of having the View manage the variable, we are going to move it into our <code>GameState</code> object. By doing this we make it much easier to inject values into the app, making it more easily testable. Plus the variable can be shared with other views that use the same Store.<br><br>## What is a <code>Binding</code><br><br>A binding in SwiftUI is a connection between a value and a view that displays and changes it (typically by using a <code>control</code> such as a Picker or Slider). You can create your own bindings with the <code>@Binding</code> property wrapper, and pass bindings into views that require them. Or you can use a property wrapper, like <code>@State</code>, which exposes a binding to its wrapped value. In the case of a <code>control</code>, the connection is two-way, so the UI element can change the value, and the value can change the UI element. Bindings make it easier to write declarative code, since the enable your code to respond to changes in the bound variables.<br><br>You access the binding using the <code>$</code> prefix. This is called the <code>projected value</code>. Use the projected value to pass a binding value down a view hierarchy. When you pass a variable in a function call using the <code>$</code> prefix you are sending the binding, and can update the variable in the called routine. The caller will see these changes and can respond to them.<br><br>You access the wrapped value using the <code>_</code> (underscore) prefix - typically in the initializer of the child view when setting up a binding (example below)<br><br>Bindings and Property Wrappers is a big topic, and this dicussion is not exactly a deep dive. I will provide many links below for you to explore this topic on your own. Please open an issue if you'd like to see a more in-depth look at these two topics.<br><br><br><code></code>`swift struct SomeParentView: View { @State var shouldDisplayText: Bool = false<br> ...<br> SomeOtherView(shouldPrint: $shouldDisplayText) ... if shouldDisplayText { Text("The child view enabled this text") } } ... }<br>struct SomeOtherView: View { @Binding var shouldDisplayText: Binding<Bool>
   
   init((shouldDisplayText: Binding<Bool>) {
      _shouldDisplayText = shouldPrint
   }
   ...
   shouldDisplayText = true
   ...
}
```

Working with the above code, here are a few observations:  
- `shouldDisplayText` is defined by the parent view.  
- because it is a `@State` variable, it is owned by this (parent) view  
- this bears repeating: `@State` has special properties that allow its wrapped value to remain intact when the view is recreated (typically due to a mutation or update to some property)  
- `$shouldDisplayText` is a binding to the wrapped value (in this code it is false until set to true in the child view)  
- The wrapped value can be accessed using a leading underscore: `_shouldDisplayText`, or via its `.wrappedValue` property.  
- Since a binding is passed to the child view's initializer, `SomeOtherView` can change the value from true to false  
- The parent view can respond to changes in the `shouldDisplayText` value made by the child view.  

So far I've glossed over the definition of what makes a property wrapper, but now that you've seen how it's declared and used, the following information has a better chance of `sticking`.

## Property Wrappers  

When I first looked up property wrappers, this is what I found:  

>[Property wrappers] Allow you to extract common logic in a distinct wrapper object  

I hate circular definitions.  This doesn't explain anything to me.  

>A property wrapper can be seen as an extra layer that defines how a property is stored or computed on reading. It’s especially useful for replacing repetitive code found in getters and setters of properties.  

At least this tells me why I might want to consider using one.  

A property wrapper is a generic structure that encapsulates read and write access to the property and adds additional behavior to it. We use it if we need to constrain the available property values, add extra logic to the read/write access (like using databases or user defaults), or add some additional methods.  

This is maybe a bit more than we need right now. I will defer discussion of the role of generics for a different day.  

>Although it would be convenient to think that everything that starts with an `@` is a property, this just isn’t the case. Keywords starting with an @ are instructions to the compiler, and signaling a property wrapper is just one of its uses.  

I'm going to close out this discussion with a brief summary of some very common SwiftUI property wrappers.  

## `@State`  

State is the simplest source of truth your app can have. It is designed to contain simple value types, such as Ints, Strings, and Bools. It is not designed for more complex, reference types, such as any classes or structs you define yourself and use within your app.  

>Whenever a `@State` variable is updated, the view itself is refreshed/recreated to reflect the new value.  

#### @State  

`@State` - this wrapper declares local value property. Apple recommends that you mark `@State` variables  private, because the view manages its lifetime locally.  

>[David Pasztor](https://stackoverflow.com/questions/61361788/state-vs-observableobject-which-and-when) If you mark any variables as @State in a SwiftUI View and bind them to a property inside the body of that View, the body will be recalculated whenever the @State variable changes and hence your whole View will be redrawn. Also, @State variables should serve as the single source of truth for a View. For these reasons, @State variables should only be accessed and updated from within the body of a View and hence should be declared private.  

### `@StateObject`  

 a `@StateObject` is also designed to be the owner of the data. You initialize it right there and thus you know exactly where it comes from.  
 
 ## `@StateObject`  

>A property wrapper type that instantiates an observable object (which is a type of object with a publisher that emits before the object has changed)  

SwiftUI’s @StateObject property wrapper is a specialized form of @ObservedObject, having all the same functionality with one important addition: it should be used to create observed objects, rather than just store one that was passed in externally.  

When you add a property to a view using @StateObject, SwiftUI considers that view to be the owner of the observable object. All other views where you pass that object should use @ObservedObject.  


By using @StateObject, we are letting our view know that whenever any of the @Published properties within the Observable Object change, we want the view to re-render - we are now listening for changes to any of its marked @Published properties.  

>A thorough explanation of `@Published` would neccesitate covering the `Combine` framework. This needs to be left for another day - please open an issue if you'd rather see it appear sooner than later.  

SwiftUI’s @StateObject property wrapper is designed to fill a very specific gap in state management: when you need to create a reference type inside one of your views and make sure it stays alive for use in that view and others you share it with.  
 
You should use @StateObject only once per object, which should be in whichever view is responsible for creating the object. All other views that share your object should use @ObservedObject.  

>[David Pasztor] If you mark any variables as @State in a SwiftUI View and bind them to a property inside the body of that View, the body will be recalculated whenever the @State variable changes and hence your whole View will be redrawn. Also, @State variables should serve as the single source of truth for a View. For these reasons, @State variables should only be accessed and updated from within the body of a View and hence should be declared private.  

### When to use either of these two  

You should use @State when you are binding some user input (such as the value of a TextField or the chosen value from a Picker). @State should be used for value types (structs and enums).  

On the other hand, @ObservedObject should be used for reference types (classes), since they trigger refreshing a view whenever any @Published property of the ObservableObject changes.  

You should use @ObservedObject when you have some data coming in from outside your View, such as in an MVVM architecture with SwiftUI, your ViewModel should be stored as an @ObservedObject on your View.  
 
## The `ObservableObject` Protocol  

This protocol is defined in `Combine`, and it defines a type of object with a publisher that emits before the object has changed. This effectively means that when @Published properties in an `ObservableObject` change, your view is notified of the change so it can respond to the change.  

`ObservableObjects` change the @Published property when a final value is ready. Conversely any changes you make to the properties of a `View` struct are immediately reflected, causing the view to be rendered anew immediately. This is part of the "push-pull" dichotomy of struct vs. class (value vs. reference types)  


## `@ObservedObject`  

A property wrapper type that subscribes to an observable object and invalidates a view whenever the `ObservableObject` changes. In contrast to the earlier wrappers, `@ObservedObject` is used to keep track of an object that has already been created.  

I have left out many useful property wrappers in this discussion, but I have covered enough of the groundwork for you to start to make your own connections when you see a property wrapper defined or used. And you will see them frequently.  


## Links
 
[Next](05-APropertyWrapperFromPointFree-BindableState)  
[HackingWithSwift - Property Wrappers](https://www.hackingwithswift.com/quick-start/swiftui/all-swiftui-property-wrappers-explained-and-compared)  
[DougGregor on GitHub](https://github.com/DougGregor/swift-evolution/blob/property-wrappers/proposals/0258-property-wrappers.md)

[So](https://stackoverflow.com/questions/24035648/swift-and-mutating-struct)
[Sam Wright](https://purple.telstra.com/blog/swiftui---state-vs--stateobject-vs--observedobject-vs--environme)  
[Hacking](https://www.hackingwithswift.com/quick-start/swiftui/what-is-the-stateobject-property-wrapper)  
[Apple OnLine Swift Documentation - Attributes](https://docs.swift.org/swift-book/ReferenceManual/Attributes.html)  
[DataFlow - Morgun Ivan](https://en.proft.me/2021/05/22/data-flow-swiftui-state-binding-observedobject/)  
[WWDC2019 - DataFlow and Swift](https://developer.apple.com/videos/play/wwdc2019/226/)  
[WWDC2020 - Data Essentials in SwiftUI](https://developer.apple.com/wwdc20/10040)  
[Sundell - Bindable SwiftUI List Elements](https://www.swiftbysundell.com/articles/bindable-swiftui-list-elements/)  
[Binding](https://www.appypie.com/binding-swiftui-how-to)

.pct 86
</p>]]></content:encoded></item><item><guid isPermaLink="true">https://github.com/mozahler/mozahler.github.io/posts/DreamingOfALoaf</guid><title>DreamingOfALoaf</title><description>A Recursive Tale</description><link>https://github.com/mozahler/mozahler.github.io/posts/DreamingOfALoaf</link><pubDate>Sat, 1 Oct 2022 12:00:00 -0400</pubDate><content:encoded><![CDATA[<h2>Dreaming of a Loaf</h2><p>I was wandering through the stacks at the library one day, and I picked up a slim volume called <a href="https://mitpress.mit.edu/books/little-lisper-trade-edition">The Little LISPer</a>.</p><p>Practically a pamphlet, it was a wonderful introductory text on the LISP programming language. The format was in the form of a question, followed by its answer. As I read it, it soon became obvious that you were being spoon-fed the information you needed to answer the next question - but only if you were paying attention. I loved it!</p><p>Somewhere within its pages there was this great little tale about recursion. I read it very many years ago, and so this is definitely a paraphrase.</p><p>One day <code>Peter the Ponderer</code> was sitting down to his evening snack of a nice slice of fresh bread, slathered with some home-made preserves. Today it was a cranberry-orange marmalade in fact. One of his favorites. The bread was fresh, so it wasn’t going to be a toast and jam day. (Not that there’s anything wrong with toast and jam!)</p><p>He cut himself a generous slice and began slathering on a thick layer of the marmalade. While he was spreading the spread, he got to thinking: “I wonder how many slices are in this loaf?” He pondered a bit, and as the events of the day caught up to him, he found himself drifting off to sleep.</p><p>In his dream it was about the time of sunset, and this is when he loved to partake of his favorite daily ritual: fresh bread and jam. He went into the kitchen where he found his recently baked loaf. He had just picked it up at the baker’s the previous day, and it had but one slice gone. Slicing off a piece of the loaf he wondered… “How many slices are in this loaf?” He thought about this for a bit and wasn’t quite sure how he was going to solve this problem.</p><p>He was rapidly growing sleepy and didn’t really give it a whole lot of thought before being engulfed by slumber. As he started to dream, he found himself walking into the kitchen about to partake of his favorite daily ritual: fresh bread and jam. The bread wasn’t freshly baked, but that was actually a good thing: it meant he would be having a nice slice of toast that night coupled with any of his many choices of spreads. Maybe it would be honey tonight? Boysenberry? Raspberry Rhubarb? He chopped off a slice, went for the honey with pimento, and blissfully munched on his yummy toast while sipping on his favorite <code>SleepyTime</code> tea. Before drifting off, he wondered to himself… “I wonder how many slices of bread make up this loaf.” And before you know it, he was sound asleep.</p><p>I’m sure you’re picking up on this pattern… as the loaf shrinks in size we are a dream within a dream within a dream. Finally Peter enters the kitchen and finds there is only one slice left of his beloved loaf of bread. He dutifully smears his topping of the day on his generous slice, and swallows the tasty snack down. As he looks at the crumbs on the plate, he suddenly notices that the loaf is all gone. And — poof — he wakes from this dream realizing that he just had the last slice of bread.</p><p>But he didn’t wake all the way up, he just woke up from the dream within the dream (within the dream, and so on), to the one he just dreamt. He thought to himself… “Oh, I just had the last slice in my dream and so this slice I just ate was my second to last slice.” and — poof — he woke up from this dream to realize, "oh there are two more slices to the loaf."</p><p>And so forth, and so on, until he woke up from the very first dream and realized that there are 11 more slices of bread remaining on his freshly cut loaf.</p><p>That’s how you solve a puzzle recursively.</p><h3>The Iterative Solution</h3><p>Peter was driving himself crazy. He just had the first piece of the magnificent loaf he had purchased that day. What was driving him crazy was a silly thing, really. How many slices of bread are in this loaf? Well, Peter wasn’t going to let himself be consumed by this problem for long, so he picked up the loaf, grabbed a knife, and proceeded to slice up the bread. He lopped off a slice and thought - here's the second slice. He cut off another slice and thought, well that makes three so far...</p><p>Aha -- he realized as he was finished slicing -- There are 12 slices of bread in this loaf.</p><p>And that’s the iterative solution to the same problem.</p><h3>Which One is Better?</h3><p>The gist of the recursive approach is that you set aside a piece of the problem and then look at the problem with this smaller domain. Each time you assess the problem it is smaller in scope, until it is a very simple matter.</p><p>If it takes so many words to describe the recursive way, why would you bother trying to approach a programming problem recursively? The answer is in the previous paragraph: you break off a portion of the whole over and over again until you have reached the end and you are left with a trivial case that is easily resolved. Often that means that the recursive solution involves less code.</p><p>Do you think I'm making that up? Check out my entry on "The Flood Fill Algorithm" and you can see for yourself!</p><h2>Links</h2><p><a href="https://mitpress.mit.edu/books/little-lisper-trade-edition">The Little LISPer</a></p><p><a href="https://github/mozahler/FloodFill/Readme">FloodFill - GitHub</a><br>[other links on recursion vs iteration]<br><br>.pct 92</p>]]></content:encoded></item></channel></rss>